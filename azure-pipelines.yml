# Branches that trigger a build on commit
trigger:
- main
- release/*
- features/*
- 2.9.x

# Branch(es) that trigger(s) build(s) on PR
pr:
- main
- release/*
- features/*
- 2.9.x

jobs:
- job: Windows
  strategy:
    maxParallel: 4
    matrix:
      Debug:
        _configuration: Debug
        _codeCoverage: True
      Release:
        _configuration: Release
        _codeCoverage: False
  pool:
    name: NetCore-Public
    demands: ImageOverride -equals windows.vs2022preview.amd64.open
  timeoutInMinutes: 120

  steps:
    - checkout: self
      clean: true
    - pwsh: eng\scripts\Get-ProcDump.ps1
      displayName: Get ProcDump
    - pwsh: Write-Host "##vso[task.setvariable variable=PROCDUMP_PATH;]$(Build.SourcesDirectory)\.tools\procdump"
      displayName: Set PROCDUMP_PATH Environment Variable
    - pwsh: Write-Host "##vso[task.prependpath]$(Build.SourcesDirectory)\.tools\procdump"
      displayName: Set PATH Environment Variable
    - pwsh: Write-Host "##vso[task.setvariable variable=VSTEST_DUMP_FORCEPROCDUMP;]1"
      displayName: Set VSTEST_DUMP_FORCEPROCDUMP Environment Variable
    - script: eng\common\cibuild.cmd -configuration $(_configuration) -prepareMachine /p:Coverage=$(_codeCoverage)
      displayName: Build and Test
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Build.SourcesDirectory)\artifacts\TestResults\$(_configuration)\*.trx'
        mergeTestResults: true
        testRunTitle: 'Windows $(_configuration)'
      condition: always()
    - script: dotnet msbuild -binaryLogger:artifacts\log\$(_configuration)\uploadCodeCov.binlog;ProjectImports=Embed -restore eng/CodeCoverage.proj
      displayName: Upload coverage to codecov.io
      condition: and(succeeded(), eq(variables['_codeCoverage'], True))
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: Logs'
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)\artifacts\log\$(_configuration)'
        ArtifactName: 'Windows $(_configuration) Logs'
      continueOnError: true
      condition: always()
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: TestResults'
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)\artifacts\TestResults\$(_configuration)'
        ArtifactName: 'Windows $(_configuration) Test Logs'
      continueOnError: true
      condition: always()

- job: Ubuntu
  strategy:
    maxParallel: 4
    matrix:
      Debug:
        _configuration: Debug
      Release:
        _configuration: Release
  pool:
    name: NetCore-Public
    demands: ImageOverride -equals Build.Ubuntu.1804.Amd64.Open
  timeoutInMinutes: 40
  steps:
    - checkout: self
      clean: true
    - script: eng/common/cibuild.sh -configuration $(_configuration) -prepareMachine
      displayName: Build and Test

    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Build.SourcesDirectory)/artifacts/TestResults/$(_configuration)/*.trx'
        mergeTestResults: true
        testRunTitle: 'Ubuntu $(_configuration)'
      condition: always()
    - task: PublishBuildArtifacts@1
      displayName: Publish Logs
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)/artifacts/log/$(_configuration)'
        ArtifactName: 'Ubuntu $(_configuration)'
      continueOnError: true
      condition: always()

- template: eng/common/templates/job/source-build.yml

- job: Markdownlint
  pool:
      vmImage: ubuntu-22.04
  steps:
    - script: sudo npm install -g markdownlint-cli@0.31.1
      displayName: Install markdownlint-cli
    - script: markdownlint '**/*.md' -i 'docs/Analyzer reference page template.md' -i 'eng/common/**/*.md'
      displayName: Run markdownlint

# Branches that trigger a build on commit
trigger:
- main
- release/*
- features/*
- 2.9.x

# Branch(es) that trigger(s) build(s) on PR
pr:
- main
- release/*
- features/*
- 2.9.x

jobs:

- job: CheckChanges
  displayName: 'Check for product changes'
  pool:
    vmImage: 'windows-latest'
  steps:
    - powershell: |
        $changedFiles = & git diff HEAD HEAD~ --name-only
        $changedMarkdownFiles = $changedFiles.where{$_ -match '.md' }
        if ($changedFiles.Length -eq $changedMarkdownFiles.Length) {
          echo "##vso[task.setvariable variable=SOURCE_CODE_CHANGED;isOutput=true]true"
        }
        else {
          echo "##vso[task.setvariable variable=SOURCE_CODE_CHANGED;isOutput=true]false"
        }
      name: check_changes
      displayName: 'Check changed files'
- job: Windows
  dependsOn: CheckChanges
  strategy:
    maxParallel: 4
    matrix:
      Debug:
        _configuration: Debug
        _codeCoverage: True
      Release:
        _configuration: Release
        _codeCoverage: False
  pool:
    name: NetCorePublic-Pool
    queue: BuildPool.Windows.10.Amd64.VS2019.Pre.Open
  timeoutInMinutes: 40
  variables:
    source_code_changed: $[ dependencies.CheckChanges.outputs['check_changes.SOURCE_CODE_CHANGED'] ]

  steps:
    - checkout: self
      clean: true
    - script: eng\common\cibuild.cmd -configuration $(_configuration) -prepareMachine /p:Coverage=$(_codeCoverage)
      displayName: Build and Test
      condition: eq(variables.source_code_changed, 'true')
    - task: PublishTestResults@2
      inputs:
        testRunner: XUnit
        testResultsFiles: '$(Build.SourcesDirectory)\artifacts\TestResults\$(_configuration)\*.xml'
        mergeTestResults: true
        testRunTitle: 'Windows $(_configuration)'
      condition: eq(variables.source_code_changed, 'true')
    - script: dotnet msbuild -binaryLogger:artifacts\log\$(_configuration)\uploadCodeCov.binlog;ProjectImports=Embed -restore eng/CodeCoverage.proj
      displayName: Upload coverage to codecov.io
      condition: and(succeeded(), eq(variables['_codeCoverage'], True), eq(variables.source_code_changed, 'true'))
    - task: PublishBuildArtifacts@1
      displayName: Publish Logs
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)\artifacts\log\$(_configuration)'
        ArtifactName: 'Windows $(_configuration)'
      continueOnError: true
      condition: eq(variables.source_code_changed, 'true')

- job: Windows_Desktop_Spanish_Unit_Tests
  dependsOn: CheckChanges
  strategy:
    maxParallel: 4
  pool:
    name: NetCorePublic-Pool
    queue: BuildPool.Windows.Amd64.VS2019.Pre.ES.Open
  timeoutInMinutes: 40
  variables:
    source_code_changed: $[ dependencies.CheckChanges.outputs['check_changes.SOURCE_CODE_CHANGED'] ]

  steps:
    - checkout: self
      clean: true
    - script: eng\common\cibuild.cmd -prepareMachine
      displayName: Build and Test
      condition: eq(variables.source_code_changed, 'true')
    - task: PublishTestResults@2
      inputs:
        testRunner: XUnit
        testResultsFiles: '$(Build.SourcesDirectory)\artifacts\TestResults\Debug\*.xml'
        mergeTestResults: true
        testRunTitle: 'Windows Desktop Spanish'
      condition: eq(variables.source_code_changed, 'true')
    - task: PublishBuildArtifacts@1
      displayName: Publish Logs
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)\artifacts\log\Debug'
        ArtifactName: 'Windows Desktop Spanish'
      continueOnError: true
      condition: not(succeeded())

- job: Ubuntu
  dependsOn: CheckChanges
  strategy:
    maxParallel: 4
    matrix:
      Debug:
        _configuration: Debug
      Release:
        _configuration: Release
  pool:
    name: NetCorePublic-Pool
    queue: BuildPool.Ubuntu.1804.amd64.Open
  timeoutInMinutes: 40
  variables:
    source_code_changed: $[ dependencies.CheckChanges.outputs['check_changes.SOURCE_CODE_CHANGED'] ]

  steps:
    - checkout: self
      clean: true
    - script: eng/common/cibuild.sh -configuration $(_configuration) -prepareMachine
      displayName: Build and Test
      condition: eq(variables.source_code_changed, 'true')
    - task: PublishTestResults@2
      inputs:
        testRunner: XUnit
        testResultsFiles: '$(Build.SourcesDirectory)/artifacts/TestResults/$(_configuration)/*.xml'
        mergeTestResults: true
        testRunTitle: 'Ubuntu $(_configuration)'
      condition: eq(variables.source_code_changed, 'true')
    - task: PublishBuildArtifacts@1
      displayName: Publish Logs
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)/artifacts/log/$(_configuration)'
        ArtifactName: 'Ubuntu $(_configuration)'
      continueOnError: true
      condition: eq(variables.source_code_changed, 'true')

- template: eng/common/templates/job/source-build.yml

- job: Performance
  dependsOn: CheckChanges
  strategy:
    maxParallel: 4
    matrix:
      Release:
        _configuration: Release
        _codeCoverage: False
  pool:
    name: Hosted VS2017
    queue: Windows.10.Amd64.20H2.Owl.Perf
  timeoutInMinutes: 120
  variables:
    source_code_changed: $[ dependencies.CheckChanges.outputs['check_changes.SOURCE_CODE_CHANGED'] ]

  steps:
    - checkout: self
      clean: true
    - task: PowerShell@2
      displayName: Restore
      inputs:
        filePath: eng\common\build.ps1
        arguments: -configuration Release -prepareMachine -ci -restore -binaryLog
      condition: eq(variables.source_code_changed, 'true')
    - pwsh: eng\perf\PerfCore.ps1 -v diag -diff -ci 
      displayName: Validate Performance
      condition: eq(variables.source_code_changed, 'true')
    - task: PublishBuildArtifacts@1
      displayName: Publish Performance Results
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)\artifacts'
        ArtifactName: 'Windows Performance Results'
      continueOnError: true
      condition: eq(variables.source_code_changed, 'true')

- job: Markdownlint
  pool:
      vmImage: ubuntu-18.04
  steps:
    - script: sudo npm install -g markdownlint-cli
      displayName: Install markdownlint-cli
    - script: markdownlint '**/*.md' -i 'docs/Analyzer reference page template.md' -i 'eng/common/**/*.md'
      displayName: Run markdownlint

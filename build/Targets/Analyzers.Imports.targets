<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- Copyright (c)  Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information. -->

  <!-- This file is imported by all projects at the end of the project files -->

  <!-- Compute/set the assembly, file, and NuGet versions -->
  <PropertyGroup>
    <Version>2.0.0</Version>
    <RoslynSemanticVersion>$(Version)</RoslynSemanticVersion>
    <PreReleaseVersion Condition="'$(PreReleaseVersion)' == ''">beta2</PreReleaseVersion>
    <ToolsSemanticVersion>0.0.0</ToolsSemanticVersion>
    <ToolsPreReleaseVersion>beta2</ToolsPreReleaseVersion>

    <BuildNumber Condition="'$(BuildNumber)' == ''AND ('$(BUILD_BUILDNUMBER)' != '')">$(BUILD_BUILDNUMBER)</BuildNumber>
    <BuildNumber Condition="'$(BuildNumber)' == '' AND ('$(TF_BUILD_BUILDNUMBER)' != '')
                     AND ($(TF_BUILD_BUILDNUMBER.Split('_').Length) == 2)">$(TF_BUILD_BUILDNUMBER.Split('_')[1])</BuildNumber>
    <!-- When a build number is not specified, then we should default back to '00065535.0', which is a build number in the
         same format as provided by MicroBuild v2, but greater than any that MicroBuild v2 will produce, and is still compatible
         with the Win32 file version limitations. This is required so that builds done locally, where '$(OfficialBuild)' == 'true',
         can still be deployed to VS and override the version that is globally installed. -->
    <BuildNumber Condition="'$(BuildNumber)' == ''">00065535.0</BuildNumber>

    <!-- Split the build parts out from the BuildNumber which is given to us by MicroBuild in the format of yyyymmdd.nn
         where BuildNumberFiveDigitDateStamp is mmmdd (such as 60615) and BuildNumberBuildOfTheDay is nn (which represents the nth build
         started that day). So the first build of the day, 20160615.1, will produce something similar to BuildNumberFiveDigitDateStamp: 60615,
         BuildNumberBuildOfTheDayPadded: 01;and the 12th build of the day, 20160615.12, will produce BuildNumberFiveDigitDateStamp: 60615, BuildNumberBuildOfTheDay: 12

         Additionally, in order ensure the value fits in the 16-bit PE header fields, we will only take the last five digits of the BuildNumber, so
         in the case of 20160615, we will set BuildNumberFiveDigitDateStamp to 60615. Unfortunately for releases in 2017 we can't go any higher, so
         we will continue the month counting instead: the build after 61231 is 61301. -->
    <BuildNumberFiveDigitDateStamp>$([MSBuild]::Subtract($(BuildNumber.Split('.')[0].Substring(3).Trim()), 8800))</BuildNumberFiveDigitDateStamp>
    <BuildNumberBuildOfTheDayPadded Condition="$(BuildNumber.Split('.').Length) == 2">$(BuildNumber.Split('.')[1].PadLeft(2,'0'))</BuildNumberBuildOfTheDayPadded>
  </PropertyGroup>

  <!-- NuGet version -->
  <PropertyGroup>
    <NuGetReleaseVersion>$(RoslynSemanticVersion)</NuGetReleaseVersion>
    <NuGetPreReleaseVersion>$(NuGetReleaseVersion)-$(PreReleaseVersion)</NuGetPreReleaseVersion>
    <NuGetPerBuildPreReleaseVersion>$(NuGetPreReleaseVersion)-$(BuildNumberFiveDigitDateStamp.Trim())</NuGetPerBuildPreReleaseVersion>
    <NuGetPerBuildPreReleaseVersion Condition="'$(BuildNumberBuildOfTheDayPadded)' != ''">$(NuGetPerBuildPreReleaseVersion)-$(BuildNumberBuildOfTheDayPadded.Trim())</NuGetPerBuildPreReleaseVersion>
  </PropertyGroup>

  <Choose>
    <When Condition="'$(OfficialBuild)' == 'true' OR '$(UseShippingAssemblyVersion)' == 'true'">
      <PropertyGroup>
        <AssemblyVersion>$(RoslynSemanticVersion).0</AssemblyVersion>
        <BuildVersion>$(RoslynSemanticVersion).$(BuildNumberFiveDigitDateStamp)</BuildVersion>
        <VsixVersion>$(RoslynSemanticVersion).$(BuildNumberFiveDigitDateStamp)$(BuildNumberBuildOfTheDayPadded)</VsixVersion>
      </PropertyGroup>
    </When>

    <Otherwise>
      <!-- No build version was supplied.  We'll use a special version, higher than anything
           installed, so that the assembly identity is different.  This will allows us to
           have a build with an actual number installed, but then build and F5 a build with
           this number. We will make AssemblyVersion and BuildVersion different, to catch
           any bugs where people might assume they are the same. -->
      <PropertyGroup>
        <AssemblyVersion>42.42.42.42</AssemblyVersion>
        <BuildVersion>42.42.42.42424</BuildVersion>
        <VsixVersion>42.42.42.42424</VsixVersion>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <!-- Properties for auto-generation of assembly attributes -->
  <PropertyGroup>
    <GenerateAssemblyInfo>true</GenerateAssemblyInfo>
    <AssemblyTitle Condition="'$(AssemblyTitle)' == ''">$(AssemblyName)</AssemblyTitle>
    <Company Condition="'$(Company)' == ''">Microsoft Corporation</Company>
    <Copyright Condition="'$(Copyright)' == ''">© Microsoft Corporation. All rights reserved.</Copyright>
    <Description Condition="'$(Description)' == ''">$(AssemblyName)</Description>
    <FileVersion Condition="'$(FileVersion)' == ''">$(BuildVersion)</FileVersion>
    <InformationalVersion Condition="'$(InformationalVersion)' == ''">$(BuildVersion)</InformationalVersion>
    <NeutralLanguage Condition="'$(NeutralLanguage)' == ''">en-US</NeutralLanguage>
  </PropertyGroup>

  <!-- Returns the current build version. Used in .vsixmanifests to substitute our build version into them -->
  <Target Name="GetBuildVersion" Outputs="$(BuildVersion)" />

  <!-- Update common properties -->
  <PropertyGroup Condition="'$(TestProject)' == 'true'">
    <NonShipping>true</NonShipping>
  </PropertyGroup>

  <PropertyGroup>
    <OutputPath>$(OutDir)</OutputPath>
    <DocumentationFile Condition="'$(DocumentationFile)' == '' AND '$(NoDocumentationFile)' != 'true' AND '$(Nonshipping)' != 'true' AND '$(ProjectLanguage)' == 'VB' AND '$(AssemblyName)' != ''">$(AssemblyName).xml</DocumentationFile>
    <DocumentationFile Condition="'$(DocumentationFile)' == '' AND '$(NoDocumentationFile)' != 'true' AND '$(Nonshipping)' != 'true' AND '$(ProjectLanguage)' == 'CSharp' AND '$(AssemblyName)' != ''">$(OutputPath)$(AssemblyName).xml</DocumentationFile>

    <CodeAnalysisRuleSet Condition="'$(CodeAnalysisRuleSet)' == '' AND '$(NonShipping)' == 'true'">$(AnalyzersToolsPath)\Rulesets\NonShippingProjectRules.ruleset</CodeAnalysisRuleSet>
    <CodeAnalysisRuleSet Condition="'$(CodeAnalysisRuleSet)' == ''">$(AnalyzersToolsPath)\Rulesets\Analyzers.ruleset</CodeAnalysisRuleSet>

    <RoslynInternalKey>002400000480000094000000060200000024000052534131000400000100010055e0217eb635f69281051f9a823e0c7edd90f28063eb6c7a742a19b4f6139778ee0af438f47aed3b6e9f99838aa8dba689c7a71ddb860c96d923830b57bbd5cd6119406ddb9b002cf1c723bf272d6acbb7129e9d6dd5a5309c94e0ff4b2c884d45a55f475cd7dba59198086f61f5a8c8b5e601c0edbf269733f6f578fc8579c2</RoslynInternalKey>
  </PropertyGroup>

  <!-- Enable IOperation feature for IOperation based analyzers. -->
  <Choose>
    <When Condition="$(Features) == ''">
      <PropertyGroup>
        <Features>IOperation</Features>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <Features>IOperation,$(Features)</Features>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <PropertyGroup Condition="'$(USE_INTERNAL_IOPERATION_APIS)' == 'true'">
    <DefineConstants>$(DefineConstants),USE_INTERNAL_IOPERATION_APIS,DEFAULT_SEVERITY_SUGGESTION</DefineConstants>
  </PropertyGroup>

  <!-- Settings for strong name signing -->
  <Choose>
    <When Condition="'$(SignAssembly)' == 'true'">
      <Choose>
        <!-- Shipping binaries in an "official" build are delay-signed with the MS key; later, the signing
             system will finish the strong-name signing. -->
        <When Condition="'$(NonShipping)' != 'true'">
          <PropertyGroup>
            <AssemblyOriginatorKeyFile>$(AnalyzersToolsPath)\Strong Name Keys\35MSSharedLib1024.snk</AssemblyOriginatorKeyFile>
            <DelaySign>true</DelaySign>
            <PublicKey>0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9</PublicKey>
            <PublicKeyToken>31BF3856AD364E35</PublicKeyToken>
          </PropertyGroup>
        </When>

        <!-- Non-shipping binaries are simply signed with the Roslyn internal key. -->
        <Otherwise>
          <PropertyGroup>
            <AssemblyOriginatorKeyFile>$(AnalyzersToolsPath)\Strong Name Keys\RoslynInternalKey.Private.snk</AssemblyOriginatorKeyFile>
            <DelaySign>false</DelaySign>
            <PublicKey>$(RoslynInternalKey)</PublicKey>
            <PublicKeyToken>fc793a00266884fb</PublicKeyToken>
          </PropertyGroup>
        </Otherwise>
      </Choose>
    </When>
  </Choose>

  <!-- VSIX projects generate a temp project file which doesnt have any extension and needs to be built as C# projects. The .NET SDK
       just imporrts Microsoft.Common.CurrentVersion.targets. So set LanguageTargets to import CSharp.targets if the 
       extension is unknown -->
  <PropertyGroup Condition="'$(LanguageTargets)' == ''">
    <LanguageTargets Condition="'$(MSBuildProjectExtension)' == '.csproj'">$(MSBuildToolsPath)\Microsoft.CSharp.targets</LanguageTargets>
    <LanguageTargets Condition="'$(MSBuildProjectExtension)' == '.vbproj'">$(MSBuildToolsPath)\Microsoft.VisualBasic.targets</LanguageTargets>
    <LanguageTargets Condition="'$(LanguageTargets)' == ''">$(MSBuildToolsPath)\Microsoft.CSharp.targets</LanguageTargets>
  </PropertyGroup>

  <Import Project="References.targets" />
  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" Condition="'$(DotnetProject)' == 'true'" />

  <!-- ====================================================================================
  
         Support for in-place modification of the compiled binary.
         Since there may be more than one post compile modification, we must take care not
         to break incremental builds. A timestamp file is written out when all modification
         targets have completed.
         Note that the targets participating in post compile modification must list the
         sentinel file as one of their outputs, but they should not modify it.

       ==================================================================================== -->

  <PropertyGroup>
    <PostCompileBinaryModificationSentinelFile>$(IntermediateOutputPath)$(TargetFileName).pcbm</PostCompileBinaryModificationSentinelFile>
  </PropertyGroup>

  <Target Name="PostCompileBinaryModification"
          AfterTargets="CoreCompile"
          DependsOnTargets="FakeSign"
          Inputs="@(IntermediateAssembly)"
          Outputs="@(IntermediateAssembly);$(PostCompileBinaryModificationSentinelFile)"
          Condition="'$(DesignTimeBuild)' != 'true'">

    <!-- Write out a sentinel timestamp file to prevent unnecessary work in incremental builds. -->
    <Touch AlwaysCreate="true" Files="$(PostCompileBinaryModificationSentinelFile)" />

    <ItemGroup>
      <FileWrites Include="$(PostCompileBinaryModificationSentinelFile)" />
    </ItemGroup>
  </Target>

  <!-- ====================================================================================
  
         Support for FakeSigning assemblies

       ==================================================================================== -->

  <PropertyGroup>
    <ShouldSignBuild Condition="'$(SignType)' == 'real'">true</ShouldSignBuild>
  </PropertyGroup>

  <Target Name="FakeSign"
          Condition="'$(DesignTimeBuild)' != 'true' AND '$(DelaySign)' == 'true' AND '$(ShouldSignBuild)' != 'true' AND ('$(Language)' == 'C#' OR '$(Language)' == 'VB')"
          Inputs="@(IntermediateAssembly)"
          Outputs="@(IntermediateAssembly);$(PostCompileBinaryModificationSentinelFile)">

    <Exec Command="&quot;$(FakeSignToolPath)&quot; &quot;@(IntermediateAssembly)&quot;" />

  </Target>

  <!-- ====================================================================================
  
         Support for real-signing assemblies

       ==================================================================================== -->

  <ItemGroup Condition="'$(DelaySign)' == 'true' AND '$(ShouldSignBuild)' == 'true' AND ('$(Language)' == 'C#' OR '$(Language)' == 'VB')">
    <FilesToSign Include="$(OutDir)$(TargetFileName)">
      <Authenticode>MicrosoftSHA1</Authenticode>
      <StrongName>MsSharedLib72</StrongName>
    </FilesToSign>
  </ItemGroup>

  <!-- ====================================================================================
       
         Generation of InternalsVisibleTo attributes from the project
       
       ==================================================================================== -->

  <Import Project="GenerateInternalsVisibleTo.targets" />

  <!-- ====================================================================================
       
         VSSDK
       
       ==================================================================================== -->

  <Import Project="$(VSToolsPath)\VSSDK\Microsoft.VsSDK.targets" Condition="Exists('$(VSToolsPath)\VSSDK\Microsoft.VsSDK.targets') AND '$(ImportVSSDKTargets)' == 'true'" />

  <!-- The VSSDK immplements some targets which are run during design time builds per convention. 
       If the Project is not a VSIX project and sets $CreateVSIXContainer=false these targets should be 
       a no-op. However they dont check for that and that's a bug. To workaround, we override them
       with empty targets and conditionally import these if CreateVSIXContainer is false.
       Tracked by https://devdiv.visualstudio.com/DevDiv/_workitems?id=365685&fullScreen=false&_a=edit   -->
  <Import Project="VSSDKDesignTimeBuildWorkaround.targets" Condition="'$(CreateVsixContainer)'=='false'" />
</Project>

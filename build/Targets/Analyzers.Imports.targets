<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- Copyright (c)  Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information. -->

  <!-- This file is imported by all projects at the end of the project files -->

  <!-- Compute assembly, file, and NuGet versions -->
  <PropertyGroup>
    <AssemblyVersion>$(SemanticVersion).0</AssemblyVersion>
  </PropertyGroup>

  <Choose>
    <When Condition="('$(BuildNumber)' != '') and ($(BuildNumber.Split('.').Length) == 2)">
      <!-- The user specified a build number, so we should use that. -->
      <PropertyGroup>
        <BuildVersion>$(SemanticVersion).$(BuildNumber.Split('.')[0])</BuildVersion>
      </PropertyGroup>
    </When>

    <Otherwise>
      <!-- No build version was supplied.  We'll use a special version, higher than anything
           installed, so that the assembly identity is different.  This will allows us to 
           have a build with an actual number installed, but then build and F5 a build with 
           this number.  -->
      <PropertyGroup>
        <BuildVersion>$(SemanticVersion).0</BuildVersion>
      </PropertyGroup>
    </Otherwise>
  </Choose>
  
  <!-- NuGet version -->
  <PropertyGroup>
    <BuildNumberSuffix Condition="('$(TF_BUILD_BUILDNUMBER)' != '')
                     and ($(TF_BUILD_BUILDNUMBER.Split('_').Length) == 2)">$(TF_BUILD_BUILDNUMBER.Split('_')[1])</BuildNumberSuffix>
    <BuildNumberPart1 Condition="'$(BuildNumberSuffix)' != ''">
      $(BuildNumberSuffix.Split('.')[0])
    </BuildNumberPart1>
    <BuildNumberPart2 Condition="'$(BuildNumberSuffix)' != ''">
      $(BuildNumberSuffix.Split('.')[1].PadLeft(2,'0'))
    </BuildNumberPart2>

    <NuGetReleaseVersion>$(SemanticVersion)</NuGetReleaseVersion>
    <NuGetPreReleaseVersion>$(NuGetReleaseVersion)-$(PreReleaseVersion)</NuGetPreReleaseVersion>
    <NuGetPerBuildPreReleaseVersion Condition="'$(BuildNumberSuffix)' != ''">$(NuGetPreReleaseVersion)-$(BuildNumberPart1.Trim())-$(BuildNumberPart2.Trim())</NuGetPerBuildPreReleaseVersion>
  </PropertyGroup>
  
  <!-- Returns the current build version. Used in .vsixmanifests to substitute our build version into them -->
  <Target Name="GetBuildVersion" Outputs="$(BuildVersion)" />
  
  <!-- Update common properties -->
  <PropertyGroup Condition="'$(TestProject)' == 'true'">
    <NonShipping>true</NonShipping>
  </PropertyGroup>

  <PropertyGroup>
    <OutputPath>$(OutDir)</OutputPath>
    <DocumentationFile Condition="'$(DocumentationFile)' == '' AND '$(NoDocumentationFile)' != 'true' AND '$(Nonshipping)' != 'true' AND '$(ProjectLanguage)' == 'VB' AND '$(AssemblyName)' != ''">$(AssemblyName).xml</DocumentationFile>
    <DocumentationFile Condition="'$(DocumentationFile)' == '' AND '$(NoDocumentationFile)' != 'true' AND '$(Nonshipping)' != 'true' AND '$(ProjectLanguage)' == 'CSharp' AND '$(AssemblyName)' != ''">$(OutputPath)$(AssemblyName).xml</DocumentationFile>

    <CodeAnalysisRuleSet Condition="'$(CodeAnalysisRuleSet)' == '' AND '$(NonShipping)' == 'true'">$(AnalyzersToolsPath)\Rulesets\NonShippingProjectRules.ruleset</CodeAnalysisRuleSet>
    <CodeAnalysisRuleSet Condition="'$(CodeAnalysisRuleSet)' == ''">$(AnalyzersToolsPath)\Rulesets\Analyzers.ruleset</CodeAnalysisRuleSet>
    
    <RoslynInternalKey>002400000480000094000000060200000024000052534131000400000100010055e0217eb635f69281051f9a823e0c7edd90f28063eb6c7a742a19b4f6139778ee0af438f47aed3b6e9f99838aa8dba689c7a71ddb860c96d923830b57bbd5cd6119406ddb9b002cf1c723bf272d6acbb7129e9d6dd5a5309c94e0ff4b2c884d45a55f475cd7dba59198086f61f5a8c8b5e601c0edbf269733f6f578fc8579c2</RoslynInternalKey>
  </PropertyGroup>

  <!-- Enable IOperation feature for IOperation based analyzers. -->
  <Choose>
    <When Condition="$(Features) == ''">
      <PropertyGroup>
        <Features>IOperation</Features>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <Features>IOperation,$(Features)</Features>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <!-- Settings for strong name signing -->
  <Choose>
    <When Condition="'$(SignAssembly)' == 'true'">
      <Choose>
        <!-- Shipping binaries in an "official" build are delay-signed with the MS key; later, the signing
             system will finish the strong-name signing. -->
        <When Condition="'$(NonShipping)' != 'true'">
          <PropertyGroup>
            <AssemblyOriginatorKeyFile>$(AnalyzersToolsPath)\Strong Name Keys\35MSSharedLib1024.snk</AssemblyOriginatorKeyFile>
            <DelaySign>true</DelaySign>
            <PublicKey>0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9</PublicKey>
            <PublicKeyToken>31BF3856AD364E35</PublicKeyToken>
          </PropertyGroup>
        </When>

        <!-- Non-shipping binaries are simply signed with the Roslyn internal key. -->
        <Otherwise>
          <PropertyGroup>
            <AssemblyOriginatorKeyFile>$(AnalyzersToolsPath)\Strong Name Keys\RoslynInternalKey.Private.snk</AssemblyOriginatorKeyFile>
            <DelaySign>false</DelaySign>
            <PublicKey>$(RoslynInternalKey)</PublicKey>
            <PublicKeyToken>fc793a00266884fb</PublicKeyToken>
          </PropertyGroup>
        </Otherwise>
      </Choose>
    </When>
  </Choose>

  <!-- VSIX projects generate a temp project file which doesnt have any extension and needs to be built as C# projects. The .NET SDK
       just imporrts Microsoft.Common.CurrentVersion.targets. So set LanguageTargets to import CSharp.targets if the 
       extension is unknown -->
  <PropertyGroup Condition="'$(LanguageTargets)' == ''">
    <LanguageTargets Condition="'$(MSBuildProjectExtension)' == '.csproj'">$(MSBuildToolsPath)\Microsoft.CSharp.targets</LanguageTargets>
    <LanguageTargets Condition="'$(MSBuildProjectExtension)' == '.vbproj'">$(MSBuildToolsPath)\Microsoft.VisualBasic.targets</LanguageTargets>
    <LanguageTargets Condition="'$(LanguageTargets)' == ''">$(MSBuildToolsPath)\Microsoft.CSharp.targets</LanguageTargets>
  </PropertyGroup>
  
  <Import Project="References.targets" />
  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" Condition="'$(DotnetProject)' == 'true'" />

  <!-- Verify some build flags are correct -->
  <PropertyGroup>
    <PrepareForBuildDependsOn>$(PrepareForBuildDependsOn);VerifyBuildFlags</PrepareForBuildDependsOn>
  </PropertyGroup>

  <Target Name="VerifyBuildFlags">
    <Error Condition="'$(SemanticVersion)' == ''"
           Text="Projects must specify a SemanticVersion" />
    <Error Condition="'$(PreReleaseVersion)' == ''"
           Text="Projects must specify a PreReleaseVersion" />
  </Target>
  
  <!-- ====================================================================================
  
         Support for in-place modification of the compiled binary.
         Since there may be more than one post compile modification, we must take care not
         to break incremental builds. A timestamp file is written out when all modification
         targets have completed.
         Note that the targets participating in post compile modification must list the
         sentinel file as one of their outputs, but they should not modify it.

       ==================================================================================== -->

  <PropertyGroup>
    <PostCompileBinaryModificationSentinelFile>$(IntermediateOutputPath)$(TargetFileName).pcbm</PostCompileBinaryModificationSentinelFile>
  </PropertyGroup>

  <Target Name="PostCompileBinaryModification"
          AfterTargets="CoreCompile"
          DependsOnTargets="FakeSign"
          Inputs="@(IntermediateAssembly)"
          Outputs="@(IntermediateAssembly);$(PostCompileBinaryModificationSentinelFile)"
          Condition="'$(DesignTimeBuild)' != 'true'">

    <!-- Write out a sentinel timestamp file to prevent unnecessary work in incremental builds. -->
    <Touch AlwaysCreate="true" Files="$(PostCompileBinaryModificationSentinelFile)" />

    <ItemGroup>
      <FileWrites Include="$(PostCompileBinaryModificationSentinelFile)" />
    </ItemGroup>
  </Target>
  
  <!-- ====================================================================================
  
         Support for FakeSigning assemblies

       ==================================================================================== -->

  <PropertyGroup>
    <ShouldSignBuild Condition="'$(SignType)' == 'real'">true</ShouldSignBuild>
  </PropertyGroup>

  <Target Name="FakeSign"
          Condition="'$(DesignTimeBuild)' != 'true' AND '$(DelaySign)' == 'true' AND '$(ShouldSignBuild)' != 'true' AND ('$(Language)' == 'C#' OR '$(Language)' == 'VB')"
          Inputs="@(IntermediateAssembly)"
          Outputs="@(IntermediateAssembly);$(PostCompileBinaryModificationSentinelFile)">
    
    <Exec Command="&quot;$(FakeSignToolPath)&quot; &quot;@(IntermediateAssembly)&quot;" />
    
  </Target>

  <!-- ====================================================================================
  
         Support for real-signing assemblies

       ==================================================================================== -->
  
  <ItemGroup Condition="'$(DelaySign)' == 'true' AND '$(ShouldSignBuild)' == 'true' AND ('$(Language)' == 'C#' OR '$(Language)' == 'VB')">
    <FilesToSign Include="$(OutDir)$(TargetFileName)">
      <Authenticode>MicrosoftSHA1</Authenticode>
      <StrongName>MsSharedLib72</StrongName>
    </FilesToSign>
  </ItemGroup>

  <!-- ====================================================================================
       
         Generation of InternalsVisibleTo attributes from the project
       
       ==================================================================================== -->

  <Import Project="GenerateInternalsVisibleTo.targets" />
  
  <!-- ====================================================================================
       
         VSSDK
       
       ==================================================================================== -->

  <Import Project="$(VSToolsPath)\VSSDK\Microsoft.VsSDK.targets" Condition="'$(VSToolsPath)' != '' AND '$(ImportVSSDKTargets)' == 'true' AND '$(CIBuild)' == ''" />

  <!-- The VSSDK immplements some targets which are run during design time builds per convention. 
       If the Project is not a VSIX project and sets $CreateVSIXContainer=false these targets should be 
       a no-op. However they dont check for that and that's a bug. To workaround, we override them
       with empty targets and conditionally import these if CreateVSIXContainer is false.
       Tracked by https://devdiv.visualstudio.com/DevDiv/_workitems?id=365685&fullScreen=false&_a=edit   -->
  <Import Project="VSSDKDesignTimeBuildWorkaround.targets" Condition="'$(CreateVsixContainer)'=='false'" />
</Project>

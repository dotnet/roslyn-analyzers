<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en" target-language="cs" original="../MicrosoftUsageAnalyzersResources.resx">
    <body>
      <trans-unit id="DisposableFieldsShouldBeDisposedDescription">
        <source>A type that implements System.IDisposable declares fields that are of types that also implement IDisposable. The Dispose method of the field is not called by the Dispose method of the declaring type. To fix a violation of this rule, call Dispose on fields that are of types that implement IDisposable if you are responsible for allocating and releasing the unmanaged resources held by the field.</source>
        <target state="translated">Typ, který implementuje System.IDisposable, deklaruje pole s typy, které implementují také IDisposable. Metoda Dispose tohoto pole není volána metodou Dispose deklarujícího typu. Pokud chcete napravit porušení tohoto pravidla, volejte Dispose u polí s typy, které implementují IDisposable, pokud zodpovídáte za přidělení a uvolnění nespravovaných prostředků držených tímto polem.</target>
        <note />
      </trans-unit>
      <trans-unit id="DisposableFieldsShouldBeDisposedTitle">
        <source>Disposable fields should be disposed</source>
        <target state="translated">Pole, která se dají uvolnit, by se měla uvolňovat</target>
        <note />
      </trans-unit>
      <trans-unit id="DisposableFieldsShouldBeDisposedMessage">
        <source>'{0}' contains field '{1}' that is of IDisposable type '{2}', but it is never disposed. Change the Dispose method on '{0}' to call Close or Dispose on this field.</source>
        <target state="translated">{0} obsahuje pole {1}, které je typu IDisposable {2}, ale není vůbec jednoúčelové. Změňte metodu Dispose pro {0} tak, aby u tohoto pole volala Close nebo Dispose.</target>
        <note />
      </trans-unit>
      <trans-unit id="DisposeMethodsShouldCallBaseClassDisposeDescription">
        <source>A type that implements System.IDisposable inherits from a type that also implements IDisposable. The Dispose method of the inheriting type does not call the Dispose method of the parent type. To fix a violation of this rule, call base.Dispose in your Dispose method.</source>
        <target state="translated">Typ, který implementuje rozhraní System.IDisposable, dědí z typu, který také implementuje rozhraní IDisposable. Metoda Dispose dědícího typu nevolá metodu Dispose nadřazeného typu. Pokud chcete opravit porušení tohoto pravidla, zavolejte base.Dispose v metodě Dispose.</target>
        <note />
      </trans-unit>
      <trans-unit id="DisposeMethodsShouldCallBaseClassDisposeMessage">
        <source>Ensure that method '{0}' calls '{1}' in all possible control flow paths.</source>
        <target state="translated">Zajistěte, aby metoda {0} volala {1} ve všech možných cestách toku řízení.</target>
        <note />
      </trans-unit>
      <trans-unit id="DisposeMethodsShouldCallBaseClassDisposeTitle">
        <source>Dispose methods should call base class dispose</source>
        <target state="translated">Metody Dispose by měly volat uvolnění základní třídy</target>
        <note />
      </trans-unit>
    </body>
  </file>
</xliff>
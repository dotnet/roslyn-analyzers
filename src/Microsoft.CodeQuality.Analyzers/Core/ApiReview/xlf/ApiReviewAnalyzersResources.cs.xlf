<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en" target-language="cs" original="../ApiReviewAnalyzersResources.resx">
    <body>
      <trans-unit id="AvoidCallingProblematicMethodsTitle">
        <source>Avoid calling problematic methods</source>
        <target state="translated">Nevolejte problematické metody</target>
        <note />
      </trans-unit>
      <trans-unit id="AvoidCallingProblematicMethodsDescription">
        <source>A member calls a potentially dangerous or problematic method.</source>
        <target state="translated">Člen volá potenciálně nebezpečnou nebo problematickou metodu.</target>
        <note />
      </trans-unit>
      <trans-unit id="AvoidCallingProblematicMethodsMessageSystemGCCollect">
        <source>Remove the call to GC.Collect from {0}. It is usually unnecessary to force garbage collection, and doing so can severely degrade performance.</source>
        <target state="translated">Odeberte volání do GC.Collect z {0}. Obvykle není nutné vynucovat uvolňování paměti a pokud to uděláte, může se výkon velmi snížit.</target>
        <note />
      </trans-unit>
      <trans-unit id="AvoidCallingProblematicMethodsMessageSystemThreadingThreadResume">
        <source>Remove the call to Thread.Resume from {0}. Suspending and resuming threads can be dangerous if the system is in the middle of a critical operation such as executing a class constructor of an important system type or resolving security for a shared assembly.</source>
        <target state="translated">Odeberte volání do Thread.Resume z {0}. Pozastavení a obnovení vláken může být nebezpečné, pokud systém provádí kritickou operaci, třeba spouští konstruktor třídy důležitého typu systému nebo překládá zabezpečení sdíleného sestavení.</target>
        <note />
      </trans-unit>
      <trans-unit id="AvoidCallingProblematicMethodsMessageSystemThreadingThreadSuspend">
        <source>Remove the call to Thread.Suspend from {0}. Suspending and resuming threads can be dangerous if the system is in the middle of a critical operation such as executing a class constructor of an important system type or resolving security for a shared assembly.</source>
        <target state="translated">Odeberte volání do Thread.Suspend z {0}. Pozastavení a obnovení vláken může být nebezpečné, pokud systém provádí kritickou operaci, třeba spouští konstruktor třídy důležitého typu systému nebo překládá zabezpečení sdíleného sestavení.</target>
        <note />
      </trans-unit>
      <trans-unit id="AvoidCallingProblematicMethodsMessageSystemTypeInvokeMember">
        <source>Remove the call to System.Type.InvokeMember with BindingFlags.NonPublic from {0}. Taking a dependency on a private member increases the chance of a breaking change in the future.</source>
        <target state="translated">Odeberte volání do System.Type.InvokeMember s BindingFlags.NonPublic z {0}. Využití závislosti u privátního členu zvyšuje možnost, že v budoucnu bude nutné provést výraznou změnu.</target>
        <note />
      </trans-unit>
      <trans-unit id="AvoidCallingProblematicMethodsMessageCoInitializeSecurity">
        <source>{0} is a P/Invoke declaration to an OLE32 API that cannot be reliably called after the runtime has been initialized. The workaround is to write an unmanaged shim that will call the routine and then activate and call into managed code. You can do this using an export from a mixed-mode C++ DLL, by registering a managed component for use by COM, or by using the runtime hosting API.</source>
        <target state="translated">{0} je deklarace metody P/Invoke do rozhraní API OLE32, kterou nelze spolehlivě volat po inicializaci modulu runtime. Alternativním řešením je vytvořit nespravovaný kód shim, který zavolá rutinu a potom aktivuje a zavolá spravovaný kód. To můžete udělat pomocí exportu z knihovny DDL C++ ve smíšeném režimu, registrací spravované komponenty pro použití modelem COM nebo pomocí rozhraní API, které je hostitelem modulu runtime.</target>
        <note />
      </trans-unit>
      <trans-unit id="AvoidCallingProblematicMethodsMessageCoSetProxyBlanket">
        <source>{0} is a P/Invoke declaration to an OLE32 API that cannot be reliably called against a runtime callable wrapper (a managed object wrapping a COM object). Runtime callable wrappers dynamically fetch interface pointers so the effect of the call might be arbitrarily lost. Runtime callable wrappers for a given COM object are also shared across an application domain so the call could possibly affect other users. Replace this call with a native wrapper COM object for the interface pointer that does the appropriate CoSetProxyBlanket calls.</source>
        <target state="translated">{0} je deklarace metody P/Invoke do rozhraní API OLE32, kterou nelze spolehlivě volat oproti objektu volatelnému za běhu (spravovaný objekt, který zabaluje objekt modelu COM). Objekty volatelné za běhu dynamicky načítají ukazatele rozhraní, takže nahodile může dojít ke ztrátě efektu volání. Objekty volatelné za běhu pro daný objekt modelu COM se také sdílí napříč doménou, takže volání by mohlo ovlivnit ostatní uživatele. U ukazatele rozhraní, který provádí příslušná volání CoSetProxyBlanket, nahraďte toto volání objektem modelu COM nativní obálky.</target>
        <note />
      </trans-unit>
      <trans-unit id="AvoidCallingProblematicMethodsMessageSystemRuntimeInteropServicesSafeHandleDangerousGetHandle">
        <source>Remove the call to SafeHandle.DangerousGetHandle from {0}.</source>
        <target state="translated">Odeberte volání do SafeHandle.DangerousGetHandle z {0}.</target>
        <note />
      </trans-unit>
      <trans-unit id="AvoidCallingProblematicMethodsMessageSystemReflectionAssemblyLoadFrom">
        <source>Remove the call to Assembly.LoadFrom from {0}.</source>
        <target state="translated">Odeberte volání do Assembly.LoadFrom z {0}.</target>
        <note />
      </trans-unit>
      <trans-unit id="AvoidCallingProblematicMethodsMessageSystemReflectionAssemblyLoadFile">
        <source>Remove the call to Assembly.LoadFile from {0}.</source>
        <target state="translated">Odeberte volání do Assembly.LoadFile z {0}.</target>
        <note />
      </trans-unit>
      <trans-unit id="AvoidCallingProblematicMethodsMessageSystemReflectionAssemblyLoadWithPartialName">
        <source>Remove the call to Assembly.LoadWithPartialName from {0}.</source>
        <target state="translated">Odeberte volání do Assembly.LoadWithPartialName z {0}.</target>
        <note />
      </trans-unit>
      <trans-unit id="CategoryReliability">
        <source>Reliability</source>
        <target state="translated">Spolehlivost</target>
        <note />
      </trans-unit>
    </body>
  </file>
</xliff>
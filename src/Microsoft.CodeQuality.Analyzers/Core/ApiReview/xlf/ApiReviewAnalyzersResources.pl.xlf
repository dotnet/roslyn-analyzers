<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en" target-language="pl" original="../ApiReviewAnalyzersResources.resx">
    <body>
      <trans-unit id="AvoidCallingProblematicMethodsTitle">
        <source>Avoid calling problematic methods</source>
        <target state="translated">Unikaj wywoływania problematycznych metod</target>
        <note />
      </trans-unit>
      <trans-unit id="AvoidCallingProblematicMethodsDescription">
        <source>A member calls a potentially dangerous or problematic method.</source>
        <target state="translated">Składowa wywołuje potencjalnie niebezpieczną lub problematyczną metodę.</target>
        <note />
      </trans-unit>
      <trans-unit id="AvoidCallingProblematicMethodsMessageSystemGCCollect">
        <source>Remove the call to GC.Collect from {0}. It is usually unnecessary to force garbage collection, and doing so can severely degrade performance.</source>
        <target state="translated">Usuń wywołanie GC.Collect z elementu {0}. Zazwyczaj nie jest konieczne wymuszanie odzyskiwania pamięci i robienie tego może znacznie pogorszyć wydajność.</target>
        <note />
      </trans-unit>
      <trans-unit id="AvoidCallingProblematicMethodsMessageSystemThreadingThreadResume">
        <source>Remove the call to Thread.Resume from {0}. Suspending and resuming threads can be dangerous if the system is in the middle of a critical operation such as executing a class constructor of an important system type or resolving security for a shared assembly.</source>
        <target state="translated">Usuń wywołanie Thread.Resume z elementu {0}. Zawieszanie i wznawianie wątków może być niebezpieczne, jeśli system jest w trakcie krytycznej operacji, takiej jak wykonywanie konstruktora klasy ważnego typu systemu lub rozwiązywanie zabezpieczeń dla udostępnionego zestawu.</target>
        <note />
      </trans-unit>
      <trans-unit id="AvoidCallingProblematicMethodsMessageSystemThreadingThreadSuspend">
        <source>Remove the call to Thread.Suspend from {0}. Suspending and resuming threads can be dangerous if the system is in the middle of a critical operation such as executing a class constructor of an important system type or resolving security for a shared assembly.</source>
        <target state="translated">Usuń wywołanie Thread.Suspend z elementu {0}. Zawieszanie i wznawianie wątków może być niebezpieczne, jeśli system jest w trakcie krytycznej operacji, takiej jak wykonywanie konstruktora klasy ważnego typu systemu lub rozwiązywanie zabezpieczeń dla udostępnionego zestawu.</target>
        <note />
      </trans-unit>
      <trans-unit id="AvoidCallingProblematicMethodsMessageSystemTypeInvokeMember">
        <source>Remove the call to System.Type.InvokeMember with BindingFlags.NonPublic from {0}. Taking a dependency on a private member increases the chance of a breaking change in the future.</source>
        <target state="translated">Usuń wywołanie System.Type.InvokeMember razem z BindingFlags.NonPublic z elementu {0}. Przyjęcie zależności dla prywatnego członka zwiększa szansę istotnej zmiany w przyszłości.</target>
        <note />
      </trans-unit>
      <trans-unit id="AvoidCallingProblematicMethodsMessageCoInitializeSecurity">
        <source>{0} is a P/Invoke declaration to an OLE32 API that cannot be reliably called after the runtime has been initialized. The workaround is to write an unmanaged shim that will call the routine and then activate and call into managed code. You can do this using an export from a mixed-mode C++ DLL, by registering a managed component for use by COM, or by using the runtime hosting API.</source>
        <target state="translated">Element {0} jest deklaracją P/Invoke dla interfejsu API OLE32, która nie może być niezawodnie wywołana po zainicjowaniu środowiska uruchomieniowego. Obejściem jest napisanie niezarządzanej poprawki, która będzie wywoływać procedurę, a następnie uaktywniać i wywoływać zarządzany kod. Możesz to zrobić za pomocą eksportu z biblioteki DLL języka C++ trybu mieszanego, rejestrując zarządzany składnik do używania przez model COM lub używając interfejsu API hostingu środowiska uruchomieniowego.</target>
        <note />
      </trans-unit>
      <trans-unit id="AvoidCallingProblematicMethodsMessageCoSetProxyBlanket">
        <source>{0} is a P/Invoke declaration to an OLE32 API that cannot be reliably called against a runtime callable wrapper (a managed object wrapping a COM object). Runtime callable wrappers dynamically fetch interface pointers so the effect of the call might be arbitrarily lost. Runtime callable wrappers for a given COM object are also shared across an application domain so the call could possibly affect other users. Replace this call with a native wrapper COM object for the interface pointer that does the appropriate CoSetProxyBlanket calls.</source>
        <target state="translated">Element {0} jest deklaracją P/Invoke dla interfejsu API OLE32, który nie może być niezawodnie wywoływany dla wywoływalnego programu owijania środowiska uruchomieniowego (obiekt zarządzany owija obiekt COM). Wywoływalne programy owijania środowiska uruchomieniowego dynamicznie pobierają wskaźniki interfejsu, więc efekt wywołania może zostać arbitralnie utracony. Wywoływalne programy owijania środowiska uruchomieniowego dla danego obiektu COM są również udostępniane w domenie aplikacji, więc wywołanie może ewentualnie mieć wpływ na innych użytkowników. Zastąp to wywołanie natywnym programem owijania obiektu COM dla wskaźnika interfejsu, który wykonuje odpowiednie wywołania CoSetProxyBlanket.</target>
        <note />
      </trans-unit>
      <trans-unit id="AvoidCallingProblematicMethodsMessageSystemRuntimeInteropServicesSafeHandleDangerousGetHandle">
        <source>Remove the call to SafeHandle.DangerousGetHandle from {0}.</source>
        <target state="translated">Usuń wywołanie SafeHandle.DangerousGetHandle z elementu {0}.</target>
        <note />
      </trans-unit>
      <trans-unit id="AvoidCallingProblematicMethodsMessageSystemReflectionAssemblyLoadFrom">
        <source>Remove the call to Assembly.LoadFrom from {0}.</source>
        <target state="translated">Usuń wywołanie Assembly.LoadFrom z elementu {0}.</target>
        <note />
      </trans-unit>
      <trans-unit id="AvoidCallingProblematicMethodsMessageSystemReflectionAssemblyLoadFile">
        <source>Remove the call to Assembly.LoadFile from {0}.</source>
        <target state="translated">Usuń wywołanie Assembly.LoadFile z elementu {0}.</target>
        <note />
      </trans-unit>
      <trans-unit id="AvoidCallingProblematicMethodsMessageSystemReflectionAssemblyLoadWithPartialName">
        <source>Remove the call to Assembly.LoadWithPartialName from {0}.</source>
        <target state="translated">Usuń wywołanie Assembly.LoadWithPartialName z elementu {0}.</target>
        <note />
      </trans-unit>
      <trans-unit id="CategoryReliability">
        <source>Reliability</source>
        <target state="translated">Niezawodność</target>
        <note />
      </trans-unit>
    </body>
  </file>
</xliff>
<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en" target-language="zh-HANS" original="../ApiReviewAnalyzersResources.resx">
    <body>
      <trans-unit id="AvoidCallingProblematicMethodsTitle">
        <source>Avoid calling problematic methods</source>
        <target state="translated">避免调用有问题的方法</target>
        <note />
      </trans-unit>
      <trans-unit id="AvoidCallingProblematicMethodsDescription">
        <source>A member calls a potentially dangerous or problematic method.</source>
        <target state="translated">成员调用可能存在危险或有问题的方法。</target>
        <note />
      </trans-unit>
      <trans-unit id="AvoidCallingProblematicMethodsMessageSystemGCCollect">
        <source>Remove the call to GC.Collect from {0}. It is usually unnecessary to force garbage collection, and doing so can severely degrade performance.</source>
        <target state="translated">从 {0} 中删除对 GC.Collect 的调用。通常不必强制进行垃圾回收，强制进行垃圾回收可能会严重降低性能。</target>
        <note />
      </trans-unit>
      <trans-unit id="AvoidCallingProblematicMethodsMessageSystemThreadingThreadResume">
        <source>Remove the call to Thread.Resume from {0}. Suspending and resuming threads can be dangerous if the system is in the middle of a critical operation such as executing a class constructor of an important system type or resolving security for a shared assembly.</source>
        <target state="translated">从 {0} 中删除对 Thread.Resume 的调用。如果系统正在进行关键操作(例如，正在执行重要系统类型的类构造函数或正在解析共享程序集的安全性)，挂起和恢复线程可能十分危险。</target>
        <note />
      </trans-unit>
      <trans-unit id="AvoidCallingProblematicMethodsMessageSystemThreadingThreadSuspend">
        <source>Remove the call to Thread.Suspend from {0}. Suspending and resuming threads can be dangerous if the system is in the middle of a critical operation such as executing a class constructor of an important system type or resolving security for a shared assembly.</source>
        <target state="translated">从 {0} 中移除对 Thread.Suspend 的调用。如果系统正在进行关键操作(例如，正在执行重要系统类型的类构造函数或正在解析共享程序集的安全性)，挂起和恢复线程可能十分危险。</target>
        <note />
      </trans-unit>
      <trans-unit id="AvoidCallingProblematicMethodsMessageSystemTypeInvokeMember">
        <source>Remove the call to System.Type.InvokeMember with BindingFlags.NonPublic from {0}. Taking a dependency on a private member increases the chance of a breaking change in the future.</source>
        <target state="translated">从 {0} 中删除对带有 BindingFlags.NonPublic 的 System.Type.InvokeMember 的调用。依赖私有成员会增加以后进行重大更改的可能性。</target>
        <note />
      </trans-unit>
      <trans-unit id="AvoidCallingProblematicMethodsMessageCoInitializeSecurity">
        <source>{0} is a P/Invoke declaration to an OLE32 API that cannot be reliably called after the runtime has been initialized. The workaround is to write an unmanaged shim that will call the routine and then activate and call into managed code. You can do this using an export from a mixed-mode C++ DLL, by registering a managed component for use by COM, or by using the runtime hosting API.</source>
        <target state="translated">{0} 是对 OLE32 API 的 P/Invoke 声明，在运行时初始化后无法可靠地调用该声明。解决方法是写入一个非托管程序，该程序调用例程，然后激活并调入托管代码。通过注册供 COM 使用的托管组件或使用运行时承载 API，就可以使用混合模式 C++ DLL 的导出内容实现上述功能。</target>
        <note />
      </trans-unit>
      <trans-unit id="AvoidCallingProblematicMethodsMessageCoSetProxyBlanket">
        <source>{0} is a P/Invoke declaration to an OLE32 API that cannot be reliably called against a runtime callable wrapper (a managed object wrapping a COM object). Runtime callable wrappers dynamically fetch interface pointers so the effect of the call might be arbitrarily lost. Runtime callable wrappers for a given COM object are also shared across an application domain so the call could possibly affect other users. Replace this call with a native wrapper COM object for the interface pointer that does the appropriate CoSetProxyBlanket calls.</source>
        <target state="translated">{0} 是对 OLE32 API 的 P/Invoke 声明，无法针对运行时可调用包装器(用于包装 COM 对象的托管对象)可靠地调用该声明。运行时可调用包装器动态提取接口指针，因此调用的效果可能会无故丢失。还可跨应用程序域共享给定 COM 对象的运行时可调用包装器，因此该调用可能会影响其他用户。用执行相应 CoSetProxyBlanket 调用的接口指针的本机包装器 COM 对象替换此调用。</target>
        <note />
      </trans-unit>
      <trans-unit id="AvoidCallingProblematicMethodsMessageSystemRuntimeInteropServicesSafeHandleDangerousGetHandle">
        <source>Remove the call to SafeHandle.DangerousGetHandle from {0}.</source>
        <target state="translated">从 {0} 中删除对 SafeHandle.DangerousGetHandle 的调用。</target>
        <note />
      </trans-unit>
      <trans-unit id="AvoidCallingProblematicMethodsMessageSystemReflectionAssemblyLoadFrom">
        <source>Remove the call to Assembly.LoadFrom from {0}.</source>
        <target state="translated">从 {0} 中删除对 Assembly.LoadFrom 的调用。</target>
        <note />
      </trans-unit>
      <trans-unit id="AvoidCallingProblematicMethodsMessageSystemReflectionAssemblyLoadFile">
        <source>Remove the call to Assembly.LoadFile from {0}.</source>
        <target state="translated">从 {0} 中删除对 Assembly.LoadFile 的调用。</target>
        <note />
      </trans-unit>
      <trans-unit id="AvoidCallingProblematicMethodsMessageSystemReflectionAssemblyLoadWithPartialName">
        <source>Remove the call to Assembly.LoadWithPartialName from {0}.</source>
        <target state="translated">从 {0} 中删除对 Assembly.LoadWithPartialName 的调用。</target>
        <note />
      </trans-unit>
      <trans-unit id="CategoryReliability">
        <source>Reliability</source>
        <target state="translated">可靠性</target>
        <note />
      </trans-unit>
    </body>
  </file>
</xliff>
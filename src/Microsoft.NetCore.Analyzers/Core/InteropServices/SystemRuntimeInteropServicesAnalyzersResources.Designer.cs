//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.NetCore.Analyzers.InteropServices {
    using System;
    using System.Reflection;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class SystemRuntimeInteropServicesAnalyzersResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal SystemRuntimeInteropServicesAnalyzersResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Microsoft.NetCore.Analyzers.InteropServices.SystemRuntimeInteropServicesAnalyzers" +
                            "Resources", typeof(SystemRuntimeInteropServicesAnalyzersResources).GetTypeInfo().Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PreserveSigAttribute indicates that a method will return an HRESULT, rather than throwing an exception. Therefore, it is important to consume the HRESULT returned by the method, so that errors can be detected. Generally, this is done by calling Marshal.ThrowExceptionForHR..
        /// </summary>
        internal static string AlwaysConsumeTheValueReturnedByMethodsMarkedWithPreserveSigAttributeDescription {
            get {
                return ResourceManager.GetString("AlwaysConsumeTheValueReturnedByMethodsMarkedWithPreserveSigAttributeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Consume the hresult returned by method &apos;{0}&apos; and call Marshal.ThrowExceptionForHR..
        /// </summary>
        internal static string AlwaysConsumeTheValueReturnedByMethodsMarkedWithPreserveSigAttributeMessage {
            get {
                return ResourceManager.GetString("AlwaysConsumeTheValueReturnedByMethodsMarkedWithPreserveSigAttributeMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Always consume the value returned by methods marked with PreserveSigAttribute.
        /// </summary>
        internal static string AlwaysConsumeTheValueReturnedByMethodsMarkedWithPreserveSigAttributeTitle {
            get {
                return ResourceManager.GetString("AlwaysConsumeTheValueReturnedByMethodsMarkedWithPreserveSigAttributeTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Globalization.
        /// </summary>
        internal static string CategoryGlobalization {
            get {
                return ResourceManager.GetString("CategoryGlobalization", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Interoperability.
        /// </summary>
        internal static string CategoryInteroperability {
            get {
                return ResourceManager.GetString("CategoryInteroperability", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Portability.
        /// </summary>
        internal static string CategoryPortability {
            get {
                return ResourceManager.GetString("CategoryPortability", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reliability.
        /// </summary>
        internal static string CategoryReliability {
            get {
                return ResourceManager.GetString("CategoryReliability", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage.
        /// </summary>
        internal static string CategoryUsage {
            get {
                return ResourceManager.GetString("CategoryUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Boolean data type has multiple representations in unmanaged code..
        /// </summary>
        internal static string MarkBooleanPInvokeArgumentsWithMarshalAsDescription {
            get {
                return ResourceManager.GetString("MarkBooleanPInvokeArgumentsWithMarshalAsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add the MarshalAsAttribute to parameter {0} of P/Invoke {1}. If the corresponding unmanaged parameter is a 4-byte Win32 &apos;BOOL&apos;, use [MarshalAs(UnmanagedType.Bool)]. For a 1-byte C++ &apos;bool&apos;, use MarshalAs(UnmanagedType.U1)..
        /// </summary>
        internal static string MarkBooleanPInvokeArgumentsWithMarshalAsMessageDefault {
            get {
                return ResourceManager.GetString("MarkBooleanPInvokeArgumentsWithMarshalAsMessageDefault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add the MarshalAsAttribute to the return type of P/Invoke {0}. If the corresponding unmanaged return type is a 4-byte Win32 &apos;BOOL&apos;, use MarshalAs(UnmanagedType.Bool). For a 1-byte C++ &apos;bool&apos;, use MarshalAs(UnmanagedType.U1)..
        /// </summary>
        internal static string MarkBooleanPInvokeArgumentsWithMarshalAsMessageReturn {
            get {
                return ResourceManager.GetString("MarkBooleanPInvokeArgumentsWithMarshalAsMessageReturn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mark boolean PInvoke arguments with MarshalAs.
        /// </summary>
        internal static string MarkBooleanPInvokeArgumentsWithMarshalAsTitle {
            get {
                return ResourceManager.GetString("MarkBooleanPInvokeArgumentsWithMarshalAsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This rule evaluates the size of each parameter and the return value of a P/Invoke, and verifies that the size of the parameter is correct when marshaled to unmanaged code on 32-bit and 64-bit operating systems..
        /// </summary>
        internal static string PInvokeDeclarationsShouldBePortableDescription {
            get {
                return ResourceManager.GetString("PInvokeDeclarationsShouldBePortableDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to As it is declared in your code, parameter {0} of P/Invoke {1} will be {2} bytes wide on {3} platforms. This is not correct, as the actual native declaration of this API indicates it should be {4} bytes wide on {3} platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of {5}..
        /// </summary>
        internal static string PInvokeDeclarationsShouldBePortableMessageParameter {
            get {
                return ResourceManager.GetString("PInvokeDeclarationsShouldBePortableMessageParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to As it is declared in your code, the return type of P/Invoke {0} will be {1} bytes wide on {2} platforms. This is not correct, as the actual native declaration of this API indicates it should be {3} bytes wide on {2} platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of {4}..
        /// </summary>
        internal static string PInvokeDeclarationsShouldBePortableMessageReturn {
            get {
                return ResourceManager.GetString("PInvokeDeclarationsShouldBePortableMessageReturn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PInvoke declarations should be portable.
        /// </summary>
        internal static string PInvokeDeclarationsShouldBePortableTitle {
            get {
                return ResourceManager.GetString("PInvokeDeclarationsShouldBePortableTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A public or protected method in a public type has the System.Runtime.InteropServices.DllImportAttribute attribute (also implemented by the Declare keyword in Visual Basic). Such methods should not be exposed..
        /// </summary>
        internal static string PInvokesShouldNotBeVisibleDescription {
            get {
                return ResourceManager.GetString("PInvokesShouldNotBeVisibleDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to P/Invoke method &apos;{0}&apos; should not be visible.
        /// </summary>
        internal static string PInvokesShouldNotBeVisibleMessage {
            get {
                return ResourceManager.GetString("PInvokesShouldNotBeVisibleMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to P/Invokes should not be visible.
        /// </summary>
        internal static string PInvokesShouldNotBeVisibleTitle {
            get {
                return ResourceManager.GetString("PInvokesShouldNotBeVisibleTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A platform invoke member allows partially trusted callers, has a string parameter, and does not explicitly marshal the string. This can cause a potential security vulnerability..
        /// </summary>
        internal static string SpecifyMarshalingForPInvokeStringArgumentsDescription {
            get {
                return ResourceManager.GetString("SpecifyMarshalingForPInvokeStringArgumentsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To reduce security risk, marshal field {0} as Unicode, by setting StructLayout.CharSet on {1} to CharSet.Unicode, or by explicitly marshaling the field as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, use the BestFitMapping attribute to turn best-fit mapping off, and for added security, ensure ThrowOnUnmappableChar is on..
        /// </summary>
        internal static string SpecifyMarshalingForPInvokeStringArgumentsMessageField {
            get {
                return ResourceManager.GetString("SpecifyMarshalingForPInvokeStringArgumentsMessageField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To reduce security risk, marshal field {0} as Unicode, by setting StructLayout.CharSet on {1} to CharSet.Unicode, or by explicitly marshaling the field as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, use the BestFitMapping attribute to turn best-fit mapping off, and for added security, to turn ThrowOnUnmappableChar on..
        /// </summary>
        internal static string SpecifyMarshalingForPInvokeStringArgumentsMessageFieldImplicitAnsi {
            get {
                return ResourceManager.GetString("SpecifyMarshalingForPInvokeStringArgumentsMessageFieldImplicitAnsi", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To reduce security risk, marshal parameter {0} as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true..
        /// </summary>
        internal static string SpecifyMarshalingForPInvokeStringArgumentsMessageParameter {
            get {
                return ResourceManager.GetString("SpecifyMarshalingForPInvokeStringArgumentsMessageParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To reduce security risk, marshal parameter {0} as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, and set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true..
        /// </summary>
        internal static string SpecifyMarshalingForPInvokeStringArgumentsMessageParameterImplicitAnsi {
            get {
                return ResourceManager.GetString("SpecifyMarshalingForPInvokeStringArgumentsMessageParameterImplicitAnsi", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify marshaling for P/Invoke string arguments.
        /// </summary>
        internal static string SpecifyMarshalingForPInvokeStringArgumentsTitle {
            get {
                return ResourceManager.GetString("SpecifyMarshalingForPInvokeStringArgumentsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An operating system invoke method is defined and a method that has the equivalent functionality is located in the .NET Framework class library..
        /// </summary>
        internal static string UseManagedEquivalentsOfWin32ApiDescription {
            get {
                return ResourceManager.GetString("UseManagedEquivalentsOfWin32ApiDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use managed equivalents of win32 api.
        /// </summary>
        internal static string UseManagedEquivalentsOfWin32ApiMessage {
            get {
                return ResourceManager.GetString("UseManagedEquivalentsOfWin32ApiMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use managed equivalents of win32 api.
        /// </summary>
        internal static string UseManagedEquivalentsOfWin32ApiTitle {
            get {
                return ResourceManager.GetString("UseManagedEquivalentsOfWin32ApiTitle", resourceCulture);
            }
        }
    }
}

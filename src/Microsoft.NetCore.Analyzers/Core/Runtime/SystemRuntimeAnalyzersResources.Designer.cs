//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.NetCore.Analyzers.Runtime {
    using System;
    using System.Reflection;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class SystemRuntimeAnalyzersResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal SystemRuntimeAnalyzersResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Microsoft.NetCore.Analyzers.Runtime.SystemRuntimeAnalyzersResources", typeof(SystemRuntimeAnalyzersResources).GetTypeInfo().Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The string literal parameter of an attribute does not parse correctly for a URL, a GUID, or a version..
        /// </summary>
        internal static string AttributeStringLiteralsShouldParseCorrectlyDescription {
            get {
                return ResourceManager.GetString("AttributeStringLiteralsShouldParseCorrectlyDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In the constructor of &apos;{0}&apos;, change the value of argument &apos;{1}&apos;, which is currently &quot;{2}&quot;, to something that can be correctly parsed as &apos;{3}&apos;..
        /// </summary>
        internal static string AttributeStringLiteralsShouldParseCorrectlyMessageDefault {
            get {
                return ResourceManager.GetString("AttributeStringLiteralsShouldParseCorrectlyMessageDefault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In the constructor of &apos;{0}&apos;, change the value of argument &apos;{1}&apos;, which is currently an empty string (&quot;&quot;), to something that can be correctly parsed as &apos;{2}&apos;..
        /// </summary>
        internal static string AttributeStringLiteralsShouldParseCorrectlyMessageEmpty {
            get {
                return ResourceManager.GetString("AttributeStringLiteralsShouldParseCorrectlyMessageEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attribute string literals should parse correctly.
        /// </summary>
        internal static string AttributeStringLiteralsShouldParseCorrectlyTitle {
            get {
                return ResourceManager.GetString("AttributeStringLiteralsShouldParseCorrectlyTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The .NET Framework class library provides methods for retrieving custom attributes. By default, these methods search the attribute inheritance hierarchy. Sealing the attribute eliminates the search through the inheritance hierarchy and can improve performance..
        /// </summary>
        internal static string AvoidUnsealedAttributesDescription {
            get {
                return ResourceManager.GetString("AvoidUnsealedAttributesDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid unsealed attributes.
        /// </summary>
        internal static string AvoidUnsealedAttributesMessage {
            get {
                return ResourceManager.GetString("AvoidUnsealedAttributesMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid unsealed attributes.
        /// </summary>
        internal static string AvoidUnsealedAttributesTitle {
            get {
                return ResourceManager.GetString("AvoidUnsealedAttributesTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid unnecessary zero-length array allocations.  Use {0} instead..
        /// </summary>
        internal static string AvoidZeroLengthArrayAllocationsMessage {
            get {
                return ResourceManager.GetString("AvoidZeroLengthArrayAllocationsMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid zero-length array allocations..
        /// </summary>
        internal static string AvoidZeroLengthArrayAllocationsTitle {
            get {
                return ResourceManager.GetString("AvoidZeroLengthArrayAllocationsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A method that is an implementation of Dispose does not call GC.SuppressFinalize; or a method that is not an implementation of Dispose calls GC.SuppressFinalize; or a method calls GC.SuppressFinalize and passes something other than this (Me in Visual?Basic)..
        /// </summary>
        internal static string CallGCSuppressFinalizeCorrectlyDescription {
            get {
                return ResourceManager.GetString("CallGCSuppressFinalizeCorrectlyDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change {0} to call {1}. This will prevent derived types that introduce a finalizer from needing to re-implement &apos;IDisposable&apos; to call it..
        /// </summary>
        internal static string CallGCSuppressFinalizeCorrectlyMessageNotCalled {
            get {
                return ResourceManager.GetString("CallGCSuppressFinalizeCorrectlyMessageNotCalled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change {0} to call {1}. This will prevent unnecessary finalization of the object once it has been disposed and it has fallen out of scope..
        /// </summary>
        internal static string CallGCSuppressFinalizeCorrectlyMessageNotCalledWithFinalizer {
            get {
                return ResourceManager.GetString("CallGCSuppressFinalizeCorrectlyMessageNotCalledWithFinalizer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} calls {1} on something other than itself. Change the call site to pass &apos;this&apos; (&apos;Me&apos; in Visual Basic) instead..
        /// </summary>
        internal static string CallGCSuppressFinalizeCorrectlyMessageNotPassedThis {
            get {
                return ResourceManager.GetString("CallGCSuppressFinalizeCorrectlyMessageNotPassedThis", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} calls {1}, a method that is typically only called within an implementation of &apos;IDisposable.Dispose&apos;. Refer to the IDisposable pattern for more information..
        /// </summary>
        internal static string CallGCSuppressFinalizeCorrectlyMessageOutsideDispose {
            get {
                return ResourceManager.GetString("CallGCSuppressFinalizeCorrectlyMessageOutsideDispose", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dispose methods should call SuppressFinalize.
        /// </summary>
        internal static string CallGCSuppressFinalizeCorrectlyTitle {
            get {
                return ResourceManager.GetString("CallGCSuppressFinalizeCorrectlyTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A type that implements System.IDisposable declares fields that are of types that also implement IDisposable. The Dispose method of the field is not called by the Dispose method of the declaring type..
        /// </summary>
        internal static string DisposableFieldsShouldBeDisposedDescription {
            get {
                return ResourceManager.GetString("DisposableFieldsShouldBeDisposedDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disposable fields should be disposed.
        /// </summary>
        internal static string DisposableFieldsShouldBeDisposedMessage {
            get {
                return ResourceManager.GetString("DisposableFieldsShouldBeDisposedMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disposable fields should be disposed.
        /// </summary>
        internal static string DisposableFieldsShouldBeDisposedTitle {
            get {
                return ResourceManager.GetString("DisposableFieldsShouldBeDisposedTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A type that implements System.IDisposable and has fields that suggest the use of unmanaged resources does not implement a finalizer, as described by Object.Finalize..
        /// </summary>
        internal static string DisposableTypesShouldDeclareFinalizerDescription {
            get {
                return ResourceManager.GetString("DisposableTypesShouldDeclareFinalizerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disposable types should declare finalizer.
        /// </summary>
        internal static string DisposableTypesShouldDeclareFinalizerMessage {
            get {
                return ResourceManager.GetString("DisposableTypesShouldDeclareFinalizerMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disposable types should declare finalizer.
        /// </summary>
        internal static string DisposableTypesShouldDeclareFinalizerTitle {
            get {
                return ResourceManager.GetString("DisposableTypesShouldDeclareFinalizerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If a type inherits from a disposable type, it must call the Dispose method of the base type from its own Dispose method..
        /// </summary>
        internal static string DisposeMethodsShouldCallBaseClassDisposeDescription {
            get {
                return ResourceManager.GetString("DisposeMethodsShouldCallBaseClassDisposeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dispose Methods Should Call Base Class Dispose.
        /// </summary>
        internal static string DisposeMethodsShouldCallBaseClassDisposeMessage {
            get {
                return ResourceManager.GetString("DisposeMethodsShouldCallBaseClassDisposeMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dispose Methods Should Call Base Class Dispose.
        /// </summary>
        internal static string DisposeMethodsShouldCallBaseClassDisposeTitle {
            get {
                return ResourceManager.GetString("DisposeMethodsShouldCallBaseClassDisposeTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When a constructor calls a virtual method, the constructor for the instance that invokes the method may not have executed..
        /// </summary>
        internal static string DoNotCallOverridableMethodsInConstructorsDescription {
            get {
                return ResourceManager.GetString("DoNotCallOverridableMethodsInConstructorsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not call overridable methods in constructors.
        /// </summary>
        internal static string DoNotCallOverridableMethodsInConstructorsMessage {
            get {
                return ResourceManager.GetString("DoNotCallOverridableMethodsInConstructorsMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not call overridable methods in constructors.
        /// </summary>
        internal static string DoNotCallOverridableMethodsInConstructorsTitle {
            get {
                return ResourceManager.GetString("DoNotCallOverridableMethodsInConstructorsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not author general catch handlers in code that receives corrupted state exceptions..
        /// </summary>
        internal static string DoNotCatchCorruptedStateExceptionsInGeneralHandlersDescription {
            get {
                return ResourceManager.GetString("DoNotCatchCorruptedStateExceptionsInGeneralHandlersDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not catch corrupted state exceptions in general handlers..
        /// </summary>
        internal static string DoNotCatchCorruptedStateExceptionsInGeneralHandlersMessage {
            get {
                return ResourceManager.GetString("DoNotCatchCorruptedStateExceptionsInGeneralHandlersMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not catch corrupted state exceptions in general handlers..
        /// </summary>
        internal static string DoNotCatchCorruptedStateExceptionsInGeneralHandlersTitle {
            get {
                return ResourceManager.GetString("DoNotCatchCorruptedStateExceptionsInGeneralHandlersTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An object is said to have a weak identity when it can be directly accessed across application domain boundaries. A thread that tries to acquire a lock on an object that has a weak identity can be blocked by a second thread in a different application domain that has a lock on the same object..
        /// </summary>
        internal static string DoNotLockOnObjectsWithWeakIdentityDescription {
            get {
                return ResourceManager.GetString("DoNotLockOnObjectsWithWeakIdentityDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not lock on objects with weak identity.
        /// </summary>
        internal static string DoNotLockOnObjectsWithWeakIdentityMessage {
            get {
                return ResourceManager.GetString("DoNotLockOnObjectsWithWeakIdentityMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not lock on objects with weak identity.
        /// </summary>
        internal static string DoNotLockOnObjectsWithWeakIdentityTitle {
            get {
                return ResourceManager.GetString("DoNotLockOnObjectsWithWeakIdentityTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An exception of type that is not sufficiently specific or reserved by the runtime should never be raised by user code. This makes the original error difficult to detect and debug. If this exception instance might be thrown, use a different exception type..
        /// </summary>
        internal static string DoNotRaiseReservedExceptionTypesDescription {
            get {
                return ResourceManager.GetString("DoNotRaiseReservedExceptionTypesDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Exception type {0} is reserved by the runtime..
        /// </summary>
        internal static string DoNotRaiseReservedExceptionTypesMessageReserved {
            get {
                return ResourceManager.GetString("DoNotRaiseReservedExceptionTypesMessageReserved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Exception type {0} is not sufficiently specific..
        /// </summary>
        internal static string DoNotRaiseReservedExceptionTypesMessageTooGeneric {
            get {
                return ResourceManager.GetString("DoNotRaiseReservedExceptionTypesMessageTooGeneric", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not raise reserved exception types.
        /// </summary>
        internal static string DoNotRaiseReservedExceptionTypesTitle {
            get {
                return ResourceManager.GetString("DoNotRaiseReservedExceptionTypesTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This collection is directly indexable. Going through LINQ here causes unnecessary allocations and CPU work..
        /// </summary>
        internal static string DoNotUseEnumerableMethodsOnIndexableCollectionsInsteadUseTheCollectionDirectlyDescription {
            get {
                return ResourceManager.GetString("DoNotUseEnumerableMethodsOnIndexableCollectionsInsteadUseTheCollectionDirectlyDes" +
                        "cription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use Enumerable methods on indexable collections. Instead use the collection directly.
        /// </summary>
        internal static string DoNotUseEnumerableMethodsOnIndexableCollectionsInsteadUseTheCollectionDirectlyMessage {
            get {
                return ResourceManager.GetString("DoNotUseEnumerableMethodsOnIndexableCollectionsInsteadUseTheCollectionDirectlyMes" +
                        "sage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use Enumerable methods on indexable collections. Instead use the collection directly.
        /// </summary>
        internal static string DoNotUseEnumerableMethodsOnIndexableCollectionsInsteadUseTheCollectionDirectlyTitle {
            get {
                return ResourceManager.GetString("DoNotUseEnumerableMethodsOnIndexableCollectionsInsteadUseTheCollectionDirectlyTit" +
                        "le", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Higher-frequency periodic activity will keep the CPU busy and interfere with power-saving idle timers that turn off the display and hard disks..
        /// </summary>
        internal static string DoNotUseTimersThatPreventPowerStateChangesDescription {
            get {
                return ResourceManager.GetString("DoNotUseTimersThatPreventPowerStateChangesDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use timers that prevent power state changes.
        /// </summary>
        internal static string DoNotUseTimersThatPreventPowerStateChangesMessage {
            get {
                return ResourceManager.GetString("DoNotUseTimersThatPreventPowerStateChangesMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use timers that prevent power state changes.
        /// </summary>
        internal static string DoNotUseTimersThatPreventPowerStateChangesTitle {
            get {
                return ResourceManager.GetString("DoNotUseTimersThatPreventPowerStateChangesTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Finalization must be propagated through the inheritance hierarchy. To guarantee this, types must call their base class Finalize method in their own Finalize method..
        /// </summary>
        internal static string FinalizersShouldCallBaseClassFinalizerDescription {
            get {
                return ResourceManager.GetString("FinalizersShouldCallBaseClassFinalizerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Finalizers should call base class finalizer.
        /// </summary>
        internal static string FinalizersShouldCallBaseClassFinalizerMessage {
            get {
                return ResourceManager.GetString("FinalizersShouldCallBaseClassFinalizerMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Finalizers should call base class finalizer.
        /// </summary>
        internal static string FinalizersShouldCallBaseClassFinalizerTitle {
            get {
                return ResourceManager.GetString("FinalizersShouldCallBaseClassFinalizerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A reference type declares an explicit static constructor. To fix a violation of this rule, initialize all static data when it is declared and remove the static constructor..
        /// </summary>
        internal static string InitializeReferenceTypeStaticFieldsInlineDescription {
            get {
                return ResourceManager.GetString("InitializeReferenceTypeStaticFieldsInlineDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Initialize reference type static fields inline.
        /// </summary>
        internal static string InitializeReferenceTypeStaticFieldsInlineTitle {
            get {
                return ResourceManager.GetString("InitializeReferenceTypeStaticFieldsInlineTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Initialize all static fields in &apos;{0}&apos; when those fields are declared and remove the explicit static constructor.
        /// </summary>
        internal static string InitializeStaticFieldsInlineMessage {
            get {
                return ResourceManager.GetString("InitializeStaticFieldsInlineMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A value type declares an explicit static constructor. To fix a violation of this rule, initialize all static data when it is declared and remove the static constructor..
        /// </summary>
        internal static string InitializeValueTypeStaticFieldsInlineDescription {
            get {
                return ResourceManager.GetString("InitializeValueTypeStaticFieldsInlineDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Initialize value type static fields inline.
        /// </summary>
        internal static string InitializeValueTypeStaticFieldsInlineTitle {
            get {
                return ResourceManager.GetString("InitializeValueTypeStaticFieldsInlineTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A call is made to the default (parameterless) constructor of an exception type that is or derives from ArgumentException, or an incorrect string argument is passed to a parameterized constructor of an exception type that is or derives from ArgumentException..
        /// </summary>
        internal static string InstantiateArgumentExceptionsCorrectlyDescription {
            get {
                return ResourceManager.GetString("InstantiateArgumentExceptionsCorrectlyDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method {0} passes parameter name &apos;{1}&apos; as the {2} argument to a {3} constructor. Replace this argument with a descriptive message and pass the parameter name in the correct position..
        /// </summary>
        internal static string InstantiateArgumentExceptionsCorrectlyMessageIncorrectMessage {
            get {
                return ResourceManager.GetString("InstantiateArgumentExceptionsCorrectlyMessageIncorrectMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method {0} passes &apos;{1}&apos; as the {2} argument to a {3} constructor. Replace this argument with one of the method&apos;s parameter names. Note that the provided parameter name should have the exact casing as declared on the method..
        /// </summary>
        internal static string InstantiateArgumentExceptionsCorrectlyMessageIncorrectParameterName {
            get {
                return ResourceManager.GetString("InstantiateArgumentExceptionsCorrectlyMessageIncorrectParameterName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Call the {0} constructor that contains a message and/or paramName parameter..
        /// </summary>
        internal static string InstantiateArgumentExceptionsCorrectlyMessageNoArguments {
            get {
                return ResourceManager.GetString("InstantiateArgumentExceptionsCorrectlyMessageNoArguments", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Instantiate argument exceptions correctly.
        /// </summary>
        internal static string InstantiateArgumentExceptionsCorrectlyTitle {
            get {
                return ResourceManager.GetString("InstantiateArgumentExceptionsCorrectlyTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Strings should be normalized to uppercase. A small group of characters cannot make a round trip when they are converted to lowercase. To make a round trip means to convert the characters from one locale to another locale that represents character data differently, and then to accurately retrieve the original characters from the converted characters..
        /// </summary>
        internal static string NormalizeStringsToUppercaseDescription {
            get {
                return ResourceManager.GetString("NormalizeStringsToUppercaseDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In method &apos;{0}&apos;, replace the call to &apos;{1}&apos; with &apos;{2}&apos;..
        /// </summary>
        internal static string NormalizeStringsToUppercaseMessageToUpper {
            get {
                return ResourceManager.GetString("NormalizeStringsToUppercaseMessageToUpper", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Normalize strings to uppercase.
        /// </summary>
        internal static string NormalizeStringsToUppercaseTitle {
            get {
                return ResourceManager.GetString("NormalizeStringsToUppercaseTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The format argument that is passed to System.String.Format does not contain a format item that corresponds to each object argument, or vice versa..
        /// </summary>
        internal static string ProvideCorrectArgumentsToFormattingMethodsDescription {
            get {
                return ResourceManager.GetString("ProvideCorrectArgumentsToFormattingMethodsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provide correct arguments to formatting methods.
        /// </summary>
        internal static string ProvideCorrectArgumentsToFormattingMethodsMessage {
            get {
                return ResourceManager.GetString("ProvideCorrectArgumentsToFormattingMethodsMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provide correct arguments to formatting methods.
        /// </summary>
        internal static string ProvideCorrectArgumentsToFormattingMethodsTitle {
            get {
                return ResourceManager.GetString("ProvideCorrectArgumentsToFormattingMethodsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An exception is rethrown and the exception is explicitly specified in the throw statement. If an exception is rethrown by specifying the exception in the throw statement, the list of method calls between the original method that threw the exception and the current method is lost..
        /// </summary>
        internal static string RethrowToPreserveStackDetailsDescription {
            get {
                return ResourceManager.GetString("RethrowToPreserveStackDetailsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rethrow to preserve stack details.
        /// </summary>
        internal static string RethrowToPreserveStackDetailsMessage {
            get {
                return ResourceManager.GetString("RethrowToPreserveStackDetailsMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rethrow to preserve stack details.
        /// </summary>
        internal static string RethrowToPreserveStackDetailsTitle {
            get {
                return ResourceManager.GetString("RethrowToPreserveStackDetailsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A method or constructor calls a member that has an overload that accepts a System.Globalization.CultureInfo parameter, and the method or constructor does not call the overload that takes the CultureInfo parameter. When a CultureInfo or System.IFormatProvider object is not supplied, the default value that is supplied by the overloaded member might not have the effect that you want in all locales. If the result will be displayed to the user, specify &apos;CultureInfo.CurrentCulture&apos; as the &apos;CultureInfo&apos; parameter. [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SpecifyCultureInfoDescription {
            get {
                return ResourceManager.GetString("SpecifyCultureInfoDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The behavior of &apos;{0}&apos; could vary based on the current user&apos;s locale settings. Replace this call in &apos;{1}&apos; with a call to &apos;{2}&apos;..
        /// </summary>
        internal static string SpecifyCultureInfoMessage {
            get {
                return ResourceManager.GetString("SpecifyCultureInfoMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify CultureInfo.
        /// </summary>
        internal static string SpecifyCultureInfoTitle {
            get {
                return ResourceManager.GetString("SpecifyCultureInfoTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A method or constructor calls one or more members that have overloads that accept a System.IFormatProvider parameter, and the method or constructor does not call the overload that takes the IFormatProvider parameter. When a System.Globalization.CultureInfo or IFormatProvider object is not supplied, the default value that is supplied by the overloaded member might not have the effect that you want in all locales. If the result will be based on the input from/output displayed to the user, specify &apos;CultureInfo [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SpecifyIFormatProviderDescription {
            get {
                return ResourceManager.GetString("SpecifyIFormatProviderDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The behavior of &apos;{0}&apos; could vary based on the current user&apos;s locale settings. Replace this call in &apos;{1}&apos; with a call to &apos;{2}&apos;..
        /// </summary>
        internal static string SpecifyIFormatProviderMessageIFormatProviderAlternate {
            get {
                return ResourceManager.GetString("SpecifyIFormatProviderMessageIFormatProviderAlternate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The behavior of &apos;{0}&apos; could vary based on the current user&apos;s locale settings. Replace this call in &apos;{1}&apos; with a call to &apos;{2}&apos;..
        /// </summary>
        internal static string SpecifyIFormatProviderMessageIFormatProviderAlternateString {
            get {
                return ResourceManager.GetString("SpecifyIFormatProviderMessageIFormatProviderAlternateString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; passes &apos;{1}&apos; as the &apos;IFormatProvider&apos; parameter to &apos;{2}&apos;. This property returns a culture that is inappropriate for formatting methods..
        /// </summary>
        internal static string SpecifyIFormatProviderMessageUICulture {
            get {
                return ResourceManager.GetString("SpecifyIFormatProviderMessageUICulture", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; passes &apos;{1}&apos; as the &apos;IFormatProvider&apos; parameter to &apos;{2}&apos;. This property returns a culture that is inappropriate for formatting methods..
        /// </summary>
        internal static string SpecifyIFormatProviderMessageUICultureString {
            get {
                return ResourceManager.GetString("SpecifyIFormatProviderMessageUICultureString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify IFormatProvider.
        /// </summary>
        internal static string SpecifyIFormatProviderTitle {
            get {
                return ResourceManager.GetString("SpecifyIFormatProviderTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A string comparison operation uses a method overload that does not set a StringComparison parameter. If the result will be displayed to the user, such as when sorting a list of items for display in a list box, specify &apos;StringComparison.CurrentCulture&apos; or &apos;StringComparison.CurrentCultureIgnoreCase&apos; as the &apos;StringComparison&apos; parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify &apos;StringComparison.OrdinalIgnoreCase&apos;. Otherwise, if c [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SpecifyStringComparisonDescription {
            get {
                return ResourceManager.GetString("SpecifyStringComparisonDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The behavior of &apos;{0}&apos; could vary based on the current user&apos;s locale settings. Replace this call in &apos;{1}&apos; with a call to &apos;{2}&apos;..
        /// </summary>
        internal static string SpecifyStringComparisonMessage {
            get {
                return ResourceManager.GetString("SpecifyStringComparisonMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify StringComparison.
        /// </summary>
        internal static string SpecifyStringComparisonTitle {
            get {
                return ResourceManager.GetString("SpecifyStringComparisonTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Comparing strings by using the String.Length property or the String.IsNullOrEmpty method is significantly faster than using Equals..
        /// </summary>
        internal static string TestForEmptyStringsUsingStringLengthDescription {
            get {
                return ResourceManager.GetString("TestForEmptyStringsUsingStringLengthDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test for empty strings using &apos;string.Length&apos; property or &apos;string.IsNullOrEmpty&apos; method instead of an Equality check..
        /// </summary>
        internal static string TestForEmptyStringsUsingStringLengthMessage {
            get {
                return ResourceManager.GetString("TestForEmptyStringsUsingStringLengthMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test for empty strings using string length.
        /// </summary>
        internal static string TestForEmptyStringsUsingStringLengthTitle {
            get {
                return ResourceManager.GetString("TestForEmptyStringsUsingStringLengthTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This expression tests a value against Single.Nan or Double.Nan. Use Single.IsNan(Single) or Double.IsNan(Double) to test the value..
        /// </summary>
        internal static string TestForNaNCorrectlyDescription {
            get {
                return ResourceManager.GetString("TestForNaNCorrectlyDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test for NaN correctly.
        /// </summary>
        internal static string TestForNaNCorrectlyMessage {
            get {
                return ResourceManager.GetString("TestForNaNCorrectlyMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test for NaN correctly.
        /// </summary>
        internal static string TestForNaNCorrectlyTitle {
            get {
                return ResourceManager.GetString("TestForNaNCorrectlyTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use Array.Empty.
        /// </summary>
        internal static string UseArrayEmpty {
            get {
                return ResourceManager.GetString("UseArrayEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A string comparison operation that is nonlinguistic does not set the StringComparison parameter to either Ordinal or OrdinalIgnoreCase. By explicitly setting the parameter to either StringComparison.Ordinal or StringComparison.OrdinalIgnoreCase, your code often gains speed, becomes more correct, and becomes more reliable..
        /// </summary>
        internal static string UseOrdinalStringComparisonDescription {
            get {
                return ResourceManager.GetString("UseOrdinalStringComparisonDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} passes &apos;{1}&apos; as the &apos;StringComparer&apos; parameter to {2}. To perform a non-linguistic comparison, specify &apos;StringComparer.Ordinal&apos; or &apos;StringComparer.OrdinalIgnoreCase&apos; instead..
        /// </summary>
        internal static string UseOrdinalStringComparisonMessageStringComparer {
            get {
                return ResourceManager.GetString("UseOrdinalStringComparisonMessageStringComparer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} passes &apos;{1}&apos; as the &apos;StringComparison&apos; parameter to {2}. To perform a non-linguistic comparison, specify &apos;StringComparison.Ordinal&apos; or &apos;StringComparison.OrdinalIgnoreCase&apos; instead..
        /// </summary>
        internal static string UseOrdinalStringComparisonMessageStringComparison {
            get {
                return ResourceManager.GetString("UseOrdinalStringComparisonMessageStringComparison", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use ordinal stringcomparison.
        /// </summary>
        internal static string UseOrdinalStringComparisonTitle {
            get {
                return ResourceManager.GetString("UseOrdinalStringComparisonTitle", resourceCulture);
            }
        }
    }
}

<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ReviewCodeForSqlInjectionVulnerabilitiesMessage" xml:space="preserve">
    <value>Potential SQL injection vulnerability was found where '{0}' in method '{1}' may be tainted by user-controlled data from '{2}' in method '{3}'.</value>
  </data>
  <data name="ReviewCodeForSqlInjectionVulnerabilitiesTitle" xml:space="preserve">
    <value>Review code for SQL injection vulnerabilities</value>
  </data>
  <data name="BinaryFormatterDeserializeMaybeWithoutBinderSetMessage" xml:space="preserve">
    <value>The method '{0}' is insecure when deserializing untrusted data without a SerializationBinder to restrict the type of objects in the deserialized object graph.</value>
  </data>
  <data name="BinaryFormatterDeserializeMaybeWithoutBinderSetTitle" xml:space="preserve">
    <value>Ensure BinaryFormatter.Binder is set before calling BinaryFormatter.Deserialize</value>
  </data>
  <data name="BinaryFormatterDeserializeWithoutBinderSetMessage" xml:space="preserve">
    <value>The method '{0}' is insecure when deserializing untrusted data without a SerializationBinder to restrict the type of objects in the deserialized object graph.</value>
  </data>
  <data name="BinaryFormatterDeserializeWithoutBinderSetTitle" xml:space="preserve">
    <value>Do not call BinaryFormatter.Deserialize without first setting BinaryFormatter.Binder</value>
  </data>
  <data name="BinaryFormatterMethodUsedDescription" xml:space="preserve">
    <value>The method '{0}' is insecure when deserializing untrusted data.  If you need to instead detect BinaryFormatter deserialization without a SerializationBinder set, then disable rule CA2300, and enable rules CA2301 and CA2302.</value>
  </data>
  <data name="BinaryFormatterMethodUsedMessage" xml:space="preserve">
    <value>The method '{0}' is insecure when deserializing untrusted data.</value>
  </data>
  <data name="BinaryFormatterMethodUsedTitle" xml:space="preserve">
    <value>Do not use insecure deserializer BinaryFormatter</value>
  </data>
  <data name="LosFormatterMethodUsedMessage" xml:space="preserve">
    <value>The method '{0}' is insecure when deserializing untrusted data.</value>
  </data>
  <data name="LosFormatterMethodUsedTitle" xml:space="preserve">
    <value>Do not use insecure deserializer LosFormatter</value>
  </data>
  <data name="ReviewCodeForDllInjectionVulnerabilitiesMessage" xml:space="preserve">
    <value>Potential DLL injection vulnerability was found where '{0}' in method '{1}' may be tainted by user-controlled data from '{2}' in method '{3}'.</value>
  </data>
  <data name="ReviewCodeForDllInjectionVulnerabilitiesTitle" xml:space="preserve">
    <value>Review code for DLL injection vulnerabilities</value>
  </data>
  <data name="ReviewCodeForInformationDisclosureVulnerabilitiesMessage" xml:space="preserve">
    <value>Potential information disclosure vulnerability was found where '{0}' in method '{1}' may contain unintended information from '{2}' in method '{3}'.</value>
  </data>
  <data name="ReviewCodeForInformationDisclosureVulnerabilitiesTitle" xml:space="preserve">
    <value>Review code for information disclosure vulnerabilities</value>
  </data>
  <data name="ReviewCodeForFilePathInjectionVulnerabilitiesMessage" xml:space="preserve">
    <value>Potential file path injection vulnerability was found where '{0}' in method '{1}' may be tainted by user-controlled data from '{2}' in method '{3}'.</value>
  </data>
  <data name="ReviewCodeForFilePathInjectionVulnerabilitiesTitle" xml:space="preserve">
    <value>Review code for file path injection vulnerabilities</value>
  </data>
  <data name="ReviewCodeForProcessCommandInjectionVulnerabilitiesMessage" xml:space="preserve">
    <value>Potential process command injection vulnerability was found where '{0}' in method '{1}' may be tainted by user-controlled data from '{2}' in method '{3}'.</value>
  </data>
  <data name="ReviewCodeForProcessCommandInjectionVulnerabilitiesTitle" xml:space="preserve">
    <value>Review code for process command injection vulnerabilities</value>
  </data>
  <data name="ReviewCodeForRegexInjectionVulnerabilitiesMessage" xml:space="preserve">
    <value>Potential regex injection vulnerability was found where '{0}' in method '{1}' may be tainted by user-controlled data from '{2}' in method '{3}'.</value>
  </data>
  <data name="ReviewCodeForRegexInjectionVulnerabilitiesTitle" xml:space="preserve">
    <value>Review code for regex injection vulnerabilities</value>
  </data>
  <data name="NetDataContractSerializerDeserializeMaybeWithoutBinderSetMessage" xml:space="preserve">
    <value>The method '{0}' is insecure when deserializing untrusted data without a SerializationBinder to restrict the type of objects in the deserialized object graph.</value>
  </data>
  <data name="NetDataContractSerializerDeserializeMaybeWithoutBinderSetTitle" xml:space="preserve">
    <value>Ensure NetDataContractSerializer.Binder is set before deserializing</value>
  </data>
  <data name="NetDataContractSerializerDeserializeWithoutBinderSetMessage" xml:space="preserve">
    <value>The method '{0}' is insecure when deserializing untrusted data without a SerializationBinder to restrict the type of objects in the deserialized object graph.</value>
  </data>
  <data name="NetDataContractSerializerDeserializeWithoutBinderSetTitle" xml:space="preserve">
    <value>Do not deserialize without first setting NetDataContractSerializer.Binder</value>
  </data>
  <data name="NetDataContractSerializerMethodUsedDescription" xml:space="preserve">
    <value>The method '{0}' is insecure when deserializing untrusted data.  If you need to instead detect NetDataContractSerializer deserialization without a SerializationBinder set, then disable rule CA2310, and enable rules CA2311 and CA2312.</value>
  </data>
  <data name="NetDataContractSerializerMethodUsedMessage" xml:space="preserve">
    <value>The method '{0}' is insecure when deserializing untrusted data.</value>
  </data>
  <data name="NetDataContractSerializerMethodUsedTitle" xml:space="preserve">
    <value>Do not use insecure deserializer NetDataContractSerializer</value>
  </data>
  <data name="ObjectStateFormatterMethodUsedMessage" xml:space="preserve">
    <value>The method '{0}' is insecure when deserializing untrusted data.</value>
  </data>
  <data name="ObjectStateFormatterMethodUsedTitle" xml:space="preserve">
    <value>Do not use insecure deserializer ObjectStateFormatter</value>
  </data>
  <data name="ReviewCodeForXssVulnerabilitiesMessage" xml:space="preserve">
    <value>Potential cross-site scripting (XSS) vulnerability was found where '{0}' in method '{1}' may be tainted by user-controlled data from '{2}' in method '{3}'.</value>
  </data>
  <data name="ReviewCodeForXssVulnerabilitiesTitle" xml:space="preserve">
    <value>Review code for XSS vulnerabilities</value>
  </data>
  <data name="ReviewCodeForLdapInjectionVulnerabilitiesMessage" xml:space="preserve">
    <value>Potential LDAP injection vulnerability was found where '{0}' in method '{1}' may be tainted by user-controlled data from '{2}' in method '{3}'.</value>
  </data>
  <data name="ReviewCodeForLdapInjectionVulnerabilitiesTitle" xml:space="preserve">
    <value>Review code for LDAP injection vulnerabilities</value>
  </data>
  <data name="JavaScriptSerializerMaybeWithSimpleTypeResolverMessage" xml:space="preserve">
    <value>The method '{0}' is insecure when deserializing untrusted data with a JavaScriptSerializer initialized with a SimpleTypeResolver. Ensure that the JavaScriptSerializer is initialized without a JavaScriptTypeResolver specified, or initialized with a JavaScriptTypeResolver that limits that types of objects in the deserialized object graph.</value>
  </data>
  <data name="JavaScriptSerializerMaybeWithSimpleTypeResolverTitle" xml:space="preserve">
    <value>Ensure JavaScriptSerializer is not initialized with SimpleTypeResolver before deserializing</value>
  </data>
  <data name="JavaScriptSerializerWithSimpleTypeResolverMessage" xml:space="preserve">
    <value>The method '{0}' is insecure when deserializing untrusted data with a JavaScriptSerializer initialized with a SimpleTypeResolver. Initialize JavaScriptSerializer without a JavaScriptTypeResolver specified, or initialize with a JavaScriptTypeResolver that limits that types of objects in the deserialized object graph.</value>
  </data>
  <data name="JavaScriptSerializerWithSimpleTypeResolverTitle" xml:space="preserve">
    <value>Do not deserialize with JavaScriptSerializer using a SimpleTypeResolver</value>
  </data>
  <data name="ReviewCodeForOpenRedirectVulnerabilitiesMessage" xml:space="preserve">
    <value>Potential open redirect vulnerability was found where '{0}' in method '{1}' may be tainted by user-controlled data from '{2}' in method '{3}'.</value>
  </data>
  <data name="ReviewCodeForOpenRedirectVulnerabilitiesTitle" xml:space="preserve">
    <value>Review code for open redirect vulnerabilities</value>
  </data>
  <data name="ReviewCodeForXPathInjectionVulnerabilitiesMessage" xml:space="preserve">
    <value>Potential XPath injection vulnerability was found where '{0}' in method '{1}' may be tainted by user-controlled data from '{2}' in method '{3}'.</value>
  </data>
  <data name="ReviewCodeForXPathInjectionVulnerabilitiesTitle" xml:space="preserve">
    <value>Review code for XPath injection vulnerabilities</value>
  </data>
  <data name="ReviewCodeForXmlInjectionVulnerabilitiesMessage" xml:space="preserve">
    <value>Potential XML injection vulnerability was found where '{0}' in method '{1}' may be tainted by user-controlled data from '{2}' in method '{3}'.</value>
  </data>
  <data name="ReviewCodeForXmlInjectionVulnerabilitiesTitle" xml:space="preserve">
    <value>Review code for XML injection vulnerabilities</value>
  </data>
  <data name="ReviewCodeForXamlInjectionVulnerabilitiesMessage" xml:space="preserve">
    <value>Potential XAML injection vulnerability was found where '{0}' in method '{1}' may be tainted by user-controlled data from '{2}' in method '{3}'.</value>
  </data>
  <data name="ReviewCodeForXamlInjectionVulnerabilitiesTitle" xml:space="preserve">
    <value>Review code for XAML injection vulnerabilities</value>
  </data>
  <data name="DoNotDisableUsingServicePointManagerSecurityProtocolsMessage" xml:space="preserve">
    <value>Do not set Switch.System.ServiceModel.DisableUsingServicePointManagerSecurityProtocols to true.  Setting this switch limits Windows Communication Framework (WCF) to using Transport Layer Security (TLS) 1.0, which is insecure and obsolete.</value>
  </data>
  <data name="DoNotDisableUsingServicePointManagerSecurityProtocolsTitle" xml:space="preserve">
    <value>Do not disable ServicePointManagerSecurityProtocols</value>
  </data>
</root>
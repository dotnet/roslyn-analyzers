//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.NetFramework.Analyzers {
    using System;
    using System.Reflection;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class MicrosoftNetFrameworkAnalyzersResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal MicrosoftNetFrameworkAnalyzersResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Microsoft.NetFramework.Analyzers.MicrosoftNetFrameworkAnalyzersResources", typeof(MicrosoftNetFrameworkAnalyzersResources).GetTypeInfo().Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add the &apos;NonSerialized&apos; attribute to this field..
        /// </summary>
        internal static string AddNonSerializedAttributeCodeActionTitle {
            get {
                return ResourceManager.GetString("AddNonSerializedAttributeCodeActionTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add Serializable attribute.
        /// </summary>
        internal static string AddSerializableAttributeCodeActionTitle {
            get {
                return ResourceManager.GetString("AddSerializableAttributeCodeActionTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An access key, also known as an accelerator, enables keyboard access to a control by using the ALT key. When multiple controls have duplicate access keys, the behavior of the access key is not well defined..
        /// </summary>
        internal static string AvoidDuplicateAcceleratorsDescription {
            get {
                return ResourceManager.GetString("AvoidDuplicateAcceleratorsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid duplicate accelerators.
        /// </summary>
        internal static string AvoidDuplicateAcceleratorsMessage {
            get {
                return ResourceManager.GetString("AvoidDuplicateAcceleratorsMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid duplicate accelerators.
        /// </summary>
        internal static string AvoidDuplicateAcceleratorsTitle {
            get {
                return ResourceManager.GetString("AvoidDuplicateAcceleratorsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To fix a violation of this rule, call the base type GetObjectData method or serialization constructor from the corresponding derived type method or constructor..
        /// </summary>
        internal static string CallBaseClassMethodsOnISerializableTypesDescription {
            get {
                return ResourceManager.GetString("CallBaseClassMethodsOnISerializableTypesDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Call base class methods on ISerializable types.
        /// </summary>
        internal static string CallBaseClassMethodsOnISerializableTypesMessage {
            get {
                return ResourceManager.GetString("CallBaseClassMethodsOnISerializableTypesMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Call base class methods on ISerializable types.
        /// </summary>
        internal static string CallBaseClassMethodsOnISerializableTypesTitle {
            get {
                return ResourceManager.GetString("CallBaseClassMethodsOnISerializableTypesTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do Not Catch Corrupted State Exceptions.
        /// </summary>
        internal static string DoNotCatchCorruptedStateExceptions {
            get {
                return ResourceManager.GetString("DoNotCatchCorruptedStateExceptions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Catching corrupted state exceptions could mask errors (such as access violations), resulting in inconsistent state of execution or making it easier for attackers to compromise system. Instead, catch and handle a more specific set of exception type(s) or re-throw the exception.
        /// </summary>
        internal static string DoNotCatchCorruptedStateExceptionsDescription {
            get {
                return ResourceManager.GetString("DoNotCatchCorruptedStateExceptionsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} is catching corrupted state exception..
        /// </summary>
        internal static string DoNotCatchCorruptedStateExceptionsMessage {
            get {
                return ResourceManager.GetString("DoNotCatchCorruptedStateExceptionsMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A method in a type that inherits from System.EnterpriseServices.ServicedComponent is marked by using System.Web.Services.WebMethodAttribute. Because WebMethodAttribute and a ServicedComponent method have conflicting behavior and requirements for context and transaction flow, the behavior of the method will be incorrect in some scenarios..
        /// </summary>
        internal static string DoNotMarkServicedComponentsWithWebMethodDescription {
            get {
                return ResourceManager.GetString("DoNotMarkServicedComponentsWithWebMethodDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not mark serviced components with WebMethod.
        /// </summary>
        internal static string DoNotMarkServicedComponentsWithWebMethodMessage {
            get {
                return ResourceManager.GetString("DoNotMarkServicedComponentsWithWebMethodMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not mark serviced components with WebMethod.
        /// </summary>
        internal static string DoNotMarkServicedComponentsWithWebMethodTitle {
            get {
                return ResourceManager.GetString("DoNotMarkServicedComponentsWithWebMethodTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do Not Use Broken Cryptographic Algorithms.
        /// </summary>
        internal static string DoNotUseBrokenCryptographicAlgorithms {
            get {
                return ResourceManager.GetString("DoNotUseBrokenCryptographicAlgorithms", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attack making it computationally feasible to break this algorithm exists. This allows attackers to break the cryptographic guarantees it is designed to provide. Depending on the type and application of this cryptographic algorithm, this may allow attackers to read enciphered messages, tamper with enciphered  messages, forge digital signatures, tamper with hashed content, or otherwise compromise any cryptosystem based on this algorithm. Replace encryption uses with the AES algorithm (AES-256, AES-192 and  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string DoNotUseBrokenCryptographicAlgorithmsDescription {
            get {
                return ResourceManager.GetString("DoNotUseBrokenCryptographicAlgorithmsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} uses a broken cryptographic algorithm {1}.
        /// </summary>
        internal static string DoNotUseBrokenCryptographicAlgorithmsMessage {
            get {
                return ResourceManager.GetString("DoNotUseBrokenCryptographicAlgorithmsMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Insecure DTD Processing.
        /// </summary>
        internal static string DoNotUseDtdProcessingOverloads {
            get {
                return ResourceManager.GetString("DoNotUseDtdProcessingOverloads", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unsafe overload of &apos;{0}&apos; method.
        /// </summary>
        internal static string DoNotUseDtdProcessingOverloadsMessage {
            get {
                return ResourceManager.GetString("DoNotUseDtdProcessingOverloadsMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using XmlTextReader.Load(), creating an insecure XmlReaderSettings instance when invoking XmlReader.Create(), setting the InnerXml property of the XmlDocument and enabling DTD processing using XmlUrlResolver insecurely can lead to information disclosure. Replace it with a call to the Load() method overload that takes an XmlReader instance, use XmlReader.Create() to accept XmlReaderSettings arguments or consider explicitly setting secure values. The DataViewSettingCollectionString property of DataViewManager [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string DoNotUseInsecureDtdProcessingDescription {
            get {
                return ResourceManager.GetString("DoNotUseInsecureDtdProcessingDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}.
        /// </summary>
        internal static string DoNotUseInsecureDtdProcessingGenericMessage {
            get {
                return ResourceManager.GetString("DoNotUseInsecureDtdProcessingGenericMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enabling DTD processing on all instances derived from XmlTextReader or  XmlDocument and using XmlUrlResolver for resolving external XML entities may lead to information disclosure. Ensure to set the XmlResolver property to null, create an instance of XmlSecureResolver when processing untrusted input, or use XmlReader.Create method with a secure XmlReaderSettings argument. Unless you need to enable it, ensure the DtdProcessing property is set to false. .
        /// </summary>
        internal static string DoNotUseInsecureDtdProcessingInApiDesignDescription {
            get {
                return ResourceManager.GetString("DoNotUseInsecureDtdProcessingInApiDesignDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Providing an insecure XsltSettings instance and an insecure XmlResolver instance to XslCompiledTransform.Load method is potentially unsafe as it allows processing script within XSL, which on an untrusted XSL input may lead to malicious code execution. Either replace the insecure XsltSettings argument with XsltSettings.Default or an instance that has disabled document function and script execution, or replace the XmlResolver argurment with null or an XmlSecureResolver instance. This message may be suppressed [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string DoNotUseInsecureXSLTScriptExecutionDescription {
            get {
                return ResourceManager.GetString("DoNotUseInsecureXSLTScriptExecutionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uses the unsafe setter of InnerXml property of System.Xml.XmlDocument..
        /// </summary>
        internal static string DoNotUseSetInnerXmlMessage {
            get {
                return ResourceManager.GetString("DoNotUseSetInnerXmlMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do Not Use Weak Cryptographic Algorithms.
        /// </summary>
        internal static string DoNotUseWeakCryptographicAlgorithms {
            get {
                return ResourceManager.GetString("DoNotUseWeakCryptographicAlgorithms", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cryptographic algorithms degrade over time as attacks become for advances to attacker get access to more computation. Depending on the type and application of this cryptographic algorithm, further degradation of the cryptographic strength of it may allow attackers to read enciphered messages, tamper with enciphered  messages, forge digital signatures, tamper with hashed content, or otherwise compromise any cryptosystem based on this algorithm. Replace encryption uses with the AES algorithm (AES-256, AES-192 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string DoNotUseWeakCryptographicAlgorithmsDescription {
            get {
                return ResourceManager.GetString("DoNotUseWeakCryptographicAlgorithmsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} uses a weak cryptographic algorithm {1}.
        /// </summary>
        internal static string DoNotUseWeakCryptographicAlgorithmsMessage {
            get {
                return ResourceManager.GetString("DoNotUseWeakCryptographicAlgorithmsMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To fix a violation of this rule, make the GetObjectData method visible and overridable, and make sure that all instance fields are included in the serialization process or explicitly marked by using the NonSerializedAttribute attribute..
        /// </summary>
        internal static string ImplementISerializableCorrectlyDescription {
            get {
                return ResourceManager.GetString("ImplementISerializableCorrectlyDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add an implementation of GetObjectData to type {0}..
        /// </summary>
        internal static string ImplementISerializableCorrectlyMessageDefault {
            get {
                return ResourceManager.GetString("ImplementISerializableCorrectlyMessageDefault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make {0}.GetObjectData virtual and overridable..
        /// </summary>
        internal static string ImplementISerializableCorrectlyMessageMakeOverridable {
            get {
                return ResourceManager.GetString("ImplementISerializableCorrectlyMessageMakeOverridable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Increase the accessibility of {0}.GetObjectData so that it is visible to derived types..
        /// </summary>
        internal static string ImplementISerializableCorrectlyMessageMakeVisible {
            get {
                return ResourceManager.GetString("ImplementISerializableCorrectlyMessageMakeVisible", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Implement ISerializable correctly.
        /// </summary>
        internal static string ImplementISerializableCorrectlyTitle {
            get {
                return ResourceManager.GetString("ImplementISerializableCorrectlyTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Implement Serialization constructor.
        /// </summary>
        internal static string ImplementSerializationConstructorsCodeActionTitle {
            get {
                return ResourceManager.GetString("ImplementSerializationConstructorsCodeActionTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To fix a violation of this rule, implement the serialization constructor. For a sealed class, make the constructor private; otherwise, make it protected..
        /// </summary>
        internal static string ImplementSerializationConstructorsDescription {
            get {
                return ResourceManager.GetString("ImplementSerializationConstructorsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add a constructor to {0} with the following signature: &apos;protected {0}(SerializationInfo info, StreamingContext context)&apos;..
        /// </summary>
        internal static string ImplementSerializationConstructorsMessageCreateMagicConstructor {
            get {
                return ResourceManager.GetString("ImplementSerializationConstructorsMessageCreateMagicConstructor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Declare the serialization constructor of {0}, a sealed type, as private..
        /// </summary>
        internal static string ImplementSerializationConstructorsMessageMakeSealedMagicConstructorPrivate {
            get {
                return ResourceManager.GetString("ImplementSerializationConstructorsMessageMakeSealedMagicConstructorPrivate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Declare the serialization constructor of {0}, an unsealed type, as protected..
        /// </summary>
        internal static string ImplementSerializationConstructorsMessageMakeUnsealedMagicConstructorFamily {
            get {
                return ResourceManager.GetString("ImplementSerializationConstructorsMessageMakeUnsealedMagicConstructorFamily", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Implement serialization constructors.
        /// </summary>
        internal static string ImplementSerializationConstructorsTitle {
            get {
                return ResourceManager.GetString("ImplementSerializationConstructorsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A method that handles a serialization event does not have the correct signature, return type, or visibility..
        /// </summary>
        internal static string ImplementSerializationMethodsCorrectlyDescription {
            get {
                return ResourceManager.GetString("ImplementSerializationMethodsCorrectlyDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Because {0} is marked with OnSerializing, OnSerialized, OnDeserializing, or OnDeserialized, change its signature so that it is no longer generic..
        /// </summary>
        internal static string ImplementSerializationMethodsCorrectlyMessageGeneric {
            get {
                return ResourceManager.GetString("ImplementSerializationMethodsCorrectlyMessageGeneric", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Because {0} is marked with OnSerializing, OnSerialized, OnDeserializing, or OnDeserialized, change its signature so that it takes a single parameter of type &apos;System.Runtime.Serialization.StreamingContext&apos;..
        /// </summary>
        internal static string ImplementSerializationMethodsCorrectlyMessageParameters {
            get {
                return ResourceManager.GetString("ImplementSerializationMethodsCorrectlyMessageParameters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Because {0} is marked with OnSerializing, OnSerialized, OnDeserializing, or OnDeserialized, change its return type from {1} to void (Sub in Visual Basic)..
        /// </summary>
        internal static string ImplementSerializationMethodsCorrectlyMessageReturnType {
            get {
                return ResourceManager.GetString("ImplementSerializationMethodsCorrectlyMessageReturnType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Because {0} is marked with OnSerializing, OnSerialized, OnDeserializing, or OnDeserialized, change it from static (Shared in Visual Basic) to an instance method..
        /// </summary>
        internal static string ImplementSerializationMethodsCorrectlyMessageStatic {
            get {
                return ResourceManager.GetString("ImplementSerializationMethodsCorrectlyMessageStatic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Because {0} is marked with OnSerializing, OnSerialized, OnDeserializing, or OnDeserialized, change its accessibility to private..
        /// </summary>
        internal static string ImplementSerializationMethodsCorrectlyMessageVisibility {
            get {
                return ResourceManager.GetString("ImplementSerializationMethodsCorrectlyMessageVisibility", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Implement serialization methods correctly.
        /// </summary>
        internal static string ImplementSerializationMethodsCorrectlyTitle {
            get {
                return ResourceManager.GetString("ImplementSerializationMethodsCorrectlyTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Insecure Processing in API Design, XmlDocument and XmlTextReader.
        /// </summary>
        internal static string InsecureDtdProcessingInApiDesign {
            get {
                return ResourceManager.GetString("InsecureDtdProcessingInApiDesign", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Insecure DTD processing in XML.
        /// </summary>
        internal static string InsecureXmlDtdProcessing {
            get {
                return ResourceManager.GetString("InsecureXmlDtdProcessing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Insecure XSLT script processing..
        /// </summary>
        internal static string InsecureXsltScriptProcessingMessage {
            get {
                return ResourceManager.GetString("InsecureXsltScriptProcessingMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An instance field of a type that is not serializable is declared in a type that is serializable..
        /// </summary>
        internal static string MarkAllNonSerializableFieldsDescription {
            get {
                return ResourceManager.GetString("MarkAllNonSerializableFieldsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Field {0} is a member of type {1} which is serializable but is of type {2} which is not serializable.
        /// </summary>
        internal static string MarkAllNonSerializableFieldsMessage {
            get {
                return ResourceManager.GetString("MarkAllNonSerializableFieldsMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mark all non-serializable fields.
        /// </summary>
        internal static string MarkAllNonSerializableFieldsTitle {
            get {
                return ResourceManager.GetString("MarkAllNonSerializableFieldsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To be recognized by the common language runtime as serializable, types must be marked by using the SerializableAttribute attribute even when the type uses a custom serialization routine through implementation of the ISerializable interface..
        /// </summary>
        internal static string MarkISerializableTypesWithSerializableDescription {
            get {
                return ResourceManager.GetString("MarkISerializableTypesWithSerializableDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add [Serializable] to {0} as this type implements ISerializable.
        /// </summary>
        internal static string MarkISerializableTypesWithSerializableMessage {
            get {
                return ResourceManager.GetString("MarkISerializableTypesWithSerializableMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mark ISerializable types with serializable.
        /// </summary>
        internal static string MarkISerializableTypesWithSerializableTitle {
            get {
                return ResourceManager.GetString("MarkISerializableTypesWithSerializableTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to STAThreadAttribute indicates that the COM threading model for the application is a single-threaded apartment. This attribute must be present on the entry point of any application that uses Windows Forms; if it is omitted, the Windows components might not work correctly..
        /// </summary>
        internal static string MarkWindowsFormsEntryPointsWithStaThreadDescription {
            get {
                return ResourceManager.GetString("MarkWindowsFormsEntryPointsWithStaThreadDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mark Windows Forms entry points with STAThread.
        /// </summary>
        internal static string MarkWindowsFormsEntryPointsWithStaThreadMessage {
            get {
                return ResourceManager.GetString("MarkWindowsFormsEntryPointsWithStaThreadMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mark Windows Forms entry points with STAThread.
        /// </summary>
        internal static string MarkWindowsFormsEntryPointsWithStaThreadTitle {
            get {
                return ResourceManager.GetString("MarkWindowsFormsEntryPointsWithStaThreadTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A type has a field that is marked by using the System.Runtime.Serialization.OptionalFieldAttribute attribute, and the type does not provide deserialization event handling methods..
        /// </summary>
        internal static string ProvideDeserializationMethodsForOptionalFieldsDescription {
            get {
                return ResourceManager.GetString("ProvideDeserializationMethodsForOptionalFieldsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add a &apos;private void OnDeserialized(StreamingContext)&apos; method to type {0} and attribute it with the System.Runtime.Serialization.OnDeserializedAttribute..
        /// </summary>
        internal static string ProvideDeserializationMethodsForOptionalFieldsMessageOnDeserialized {
            get {
                return ResourceManager.GetString("ProvideDeserializationMethodsForOptionalFieldsMessageOnDeserialized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add a &apos;private void OnDeserializing(StreamingContext)&apos; method to type {0} and attribute it with the System.Runtime.Serialization.OnDeserializingAttribute..
        /// </summary>
        internal static string ProvideDeserializationMethodsForOptionalFieldsMessageOnDeserializing {
            get {
                return ResourceManager.GetString("ProvideDeserializationMethodsForOptionalFieldsMessageOnDeserializing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provide deserialization methods for optional fields.
        /// </summary>
        internal static string ProvideDeserializationMethodsForOptionalFieldsTitle {
            get {
                return ResourceManager.GetString("ProvideDeserializationMethodsForOptionalFieldsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Review code to insure that usage of System.Data.DataViewManager.DataViewSettingCollectionString input is sanitized to not contain DTD. Enabling DTD processing on the XML reader and using UrlResolver for resolving external XML entities may lead to information disclosure. Content from file system or network shares for the machine processing the XML can be exposed to attacker. In addition, an attacker can use this as a DoS vector..
        /// </summary>
        internal static string ReviewDataViewCollectionStringDescription {
            get {
                return ResourceManager.GetString("ReviewDataViewCollectionStringDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Review DataView CollectionString.
        /// </summary>
        internal static string ReviewDataViewCollectionStringMessage {
            get {
                return ResourceManager.GetString("ReviewDataViewCollectionStringMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Review DataView CollectionString.
        /// </summary>
        internal static string ReviewDataViewCollectionStringTitle {
            get {
                return ResourceManager.GetString("ReviewDataViewCollectionStringTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Property in {0} might be set from an untrusted source..
        /// </summary>
        internal static string ReviewDtdProcessingPropertiesMessage {
            get {
                return ResourceManager.GetString("ReviewDtdProcessingPropertiesMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The locale determines culture-specific presentation elements for data, such as formatting that is used for numeric values, currency symbols, and sort order. When you create a DataTable or DataSet, you should explicitly set the locale..
        /// </summary>
        internal static string SetLocaleForDataTypesDescription {
            get {
                return ResourceManager.GetString("SetLocaleForDataTypesDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set locale for data types.
        /// </summary>
        internal static string SetLocaleForDataTypesMessage {
            get {
                return ResourceManager.GetString("SetLocaleForDataTypesMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set locale for data types.
        /// </summary>
        internal static string SetLocaleForDataTypesTitle {
            get {
                return ResourceManager.GetString("SetLocaleForDataTypesTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To correctly display a message box for cultures that use a right-to-left reading order, the RightAlign and RtlReading members of the MessageBoxOptions enumeration must be passed to the Show method..
        /// </summary>
        internal static string SpecifyMessageBoxOptionsDescription {
            get {
                return ResourceManager.GetString("SpecifyMessageBoxOptionsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify MessageBoxOptions.
        /// </summary>
        internal static string SpecifyMessageBoxOptionsMessage {
            get {
                return ResourceManager.GetString("SpecifyMessageBoxOptionsMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify MessageBoxOptions.
        /// </summary>
        internal static string SpecifyMessageBoxOptionsTitle {
            get {
                return ResourceManager.GetString("SpecifyMessageBoxOptionsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An externally visible type extends certain base types. Use one of the alternatives..
        /// </summary>
        internal static string TypesShouldNotExtendCertainBaseTypesDescription {
            get {
                return ResourceManager.GetString("TypesShouldNotExtendCertainBaseTypesDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change the base type of {0} so that it no longer extends {1}. This base exception type does not provide any additional value for framework classes. Extend &apos;System.Exception&apos; or an existing unsealed exception type instead. Do not create a new exception base type unless there is specific value in enabling the creation of a catch handler for an entire class of exceptions..
        /// </summary>
        internal static string TypesShouldNotExtendCertainBaseTypesMessageSystemApplicationException {
            get {
                return ResourceManager.GetString("TypesShouldNotExtendCertainBaseTypesMessageSystemApplicationException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change the base type of {0} from {1} to its generic equivalent &apos;System.Collections.ObjectModel.Collection&apos;..
        /// </summary>
        internal static string TypesShouldNotExtendCertainBaseTypesMessageSystemCollectionsCollectionBase {
            get {
                return ResourceManager.GetString("TypesShouldNotExtendCertainBaseTypesMessageSystemCollectionsCollectionBase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change the base type of {0} from {1} to its generic equivalent &apos;System.Collections.ObjectModel.KeyedCollection&apos;..
        /// </summary>
        internal static string TypesShouldNotExtendCertainBaseTypesMessageSystemCollectionsDictionaryBase {
            get {
                return ResourceManager.GetString("TypesShouldNotExtendCertainBaseTypesMessageSystemCollectionsDictionaryBase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change the base type of {0} from {1} to its generic equivalent &apos;System.Collections.Generic.Queue&apos;..
        /// </summary>
        internal static string TypesShouldNotExtendCertainBaseTypesMessageSystemCollectionsQueue {
            get {
                return ResourceManager.GetString("TypesShouldNotExtendCertainBaseTypesMessageSystemCollectionsQueue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change the base type of {0} from {1} to its generic equivalent &apos;System.Collections.ObjectModel.ReadOnlyCollection&apos;..
        /// </summary>
        internal static string TypesShouldNotExtendCertainBaseTypesMessageSystemCollectionsReadOnlyCollectionBase {
            get {
                return ResourceManager.GetString("TypesShouldNotExtendCertainBaseTypesMessageSystemCollectionsReadOnlyCollectionBas" +
                        "e", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change the base type of {0} from {1} to its generic equivalent &apos;System.Collections.Generic.SortedList&apos;..
        /// </summary>
        internal static string TypesShouldNotExtendCertainBaseTypesMessageSystemCollectionsSortedList {
            get {
                return ResourceManager.GetString("TypesShouldNotExtendCertainBaseTypesMessageSystemCollectionsSortedList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change the base type of {0} from {1} to its generic equivalent &apos;System.Collections.Generic.Stack&apos;..
        /// </summary>
        internal static string TypesShouldNotExtendCertainBaseTypesMessageSystemCollectionsStack {
            get {
                return ResourceManager.GetString("TypesShouldNotExtendCertainBaseTypesMessageSystemCollectionsStack", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change the base type of {0} so that it no longer extends {1}. The preferred design is to decouple the underlying XmlDocument representation from the type&apos;s interface by using containment instead of inheritance..
        /// </summary>
        internal static string TypesShouldNotExtendCertainBaseTypesMessageSystemXmlXmlDocument {
            get {
                return ResourceManager.GetString("TypesShouldNotExtendCertainBaseTypesMessageSystemXmlXmlDocument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Types should not extend certain base types.
        /// </summary>
        internal static string TypesShouldNotExtendCertainBaseTypesTitle {
            get {
                return ResourceManager.GetString("TypesShouldNotExtendCertainBaseTypesTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use unsafe overloads of System.Data.DataSet.ReadXml. This API internally enables DTD processing on the XML reader instance used, and uses UrlResolver for resolving external XML entities. The outcome is information disclosure. Content from file system or network shares for the machine processing the XML can be exposed to attacker. In addition, an attacker can use this as a DoS vector..
        /// </summary>
        internal static string UseXmlReaderForDataSetReadXmlDescription {
            get {
                return ResourceManager.GetString("UseXmlReaderForDataSetReadXmlDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use XmlReader for DataSet ReadXml.
        /// </summary>
        internal static string UseXmlReaderForDataSetReadXmlMessage {
            get {
                return ResourceManager.GetString("UseXmlReaderForDataSetReadXmlMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use unsafe overloads of System.Data.DataSet.ReadXmlSchema. This API internally enables DTD processing on the XML reader instance used, and uses UrlResolver for resolving external XML entities. The outcome is information disclosure. Content from file system or network shares for the machine processing the XML can be exposed to attacker. In addition, an attacker can use this as a DoS vector..
        /// </summary>
        internal static string UseXmlReaderForDataSetReadXmlSchemaDescription {
            get {
                return ResourceManager.GetString("UseXmlReaderForDataSetReadXmlSchemaDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use XmlReader for DataSet ReadXmlSchema.
        /// </summary>
        internal static string UseXmlReaderForDataSetReadXmlSchemaMessage {
            get {
                return ResourceManager.GetString("UseXmlReaderForDataSetReadXmlSchemaMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use XmlReader for DataSet ReadXmlSchema.
        /// </summary>
        internal static string UseXmlReaderForDataSetReadXmlSchemaTitle {
            get {
                return ResourceManager.GetString("UseXmlReaderForDataSetReadXmlSchemaTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use XmlReader for DataSet ReadXml.
        /// </summary>
        internal static string UseXmlReaderForDataSetReadXmlTitle {
            get {
                return ResourceManager.GetString("UseXmlReaderForDataSetReadXmlTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use unsafe overloads of System.Data.DataTable.ReadXml. This API internally enables DTD processing on the XML reader instance used, and uses UrlResolver for resolving external XML entities. The outcome is information disclosure. Content from file system or network shares for the machine processing the XML can be exposed to attacker. In addition, an attacker can use this as a DoS vector..
        /// </summary>
        internal static string UseXmlReaderForDataTableReadXmlDescription {
            get {
                return ResourceManager.GetString("UseXmlReaderForDataTableReadXmlDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use XmlReader for DataTable ReadXml.
        /// </summary>
        internal static string UseXmlReaderForDataTableReadXmlMessage {
            get {
                return ResourceManager.GetString("UseXmlReaderForDataTableReadXmlMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Checks for usage of an unsafe overload of  System.Data.DataTable.ReadXmlSchema. This API internally enables DTD processing on the XML reader instance used, and uses UrlResolver for resolving external XML entities. The outcome is information disclosure. Content from file system or network shares for the machine processing the XML can be exposed to attacker. In addition, an attacker can use this as a DoS vector..
        /// </summary>
        internal static string UseXmlReaderForDataTableReadXmlSchemaDescription {
            get {
                return ResourceManager.GetString("UseXmlReaderForDataTableReadXmlSchemaDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use XmlReader for DataTable ReadXmlSchema.
        /// </summary>
        internal static string UseXmlReaderForDataTableReadXmlSchemaMessage {
            get {
                return ResourceManager.GetString("UseXmlReaderForDataTableReadXmlSchemaMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use XmlReader for DataTable ReadXmlSchema.
        /// </summary>
        internal static string UseXmlReaderForDataTableReadXmlSchemaTitle {
            get {
                return ResourceManager.GetString("UseXmlReaderForDataTableReadXmlSchemaTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use XmlReader for DataTable ReadXml.
        /// </summary>
        internal static string UseXmlReaderForDataTableReadXmlTitle {
            get {
                return ResourceManager.GetString("UseXmlReaderForDataTableReadXmlTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Constructor of XmlDocument derived class {0} implicitly uses insecure default value for DTD processing..
        /// </summary>
        internal static string XmlDocumentDerivedClassConstructorNoSecureXmlResolverMessage {
            get {
                return ResourceManager.GetString("XmlDocumentDerivedClassConstructorNoSecureXmlResolverMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XmlDocument derived class {0} doesn&apos;t explictily define a constructor..
        /// </summary>
        internal static string XmlDocumentDerivedClassNoConstructorMessage {
            get {
                return ResourceManager.GetString("XmlDocumentDerivedClassNoConstructorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method {0} of XmlDocument derived class sets XmlResolver property to an insecure value..
        /// </summary>
        internal static string XmlDocumentDerivedClassSetInsecureXmlResolverInMethodMessage {
            get {
                return ResourceManager.GetString("XmlDocumentDerivedClassSetInsecureXmlResolverInMethodMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An XmlDocument instance is created without setting its XmlResolver property to a secure value..
        /// </summary>
        internal static string XmlDocumentWithNoSecureResolverMessage {
            get {
                return ResourceManager.GetString("XmlDocumentWithNoSecureResolverMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An insecure XmlReaderSettings instance is provided to XmlReader.Create method..
        /// </summary>
        internal static string XmlReaderCreateInsecureConstructedMessage {
            get {
                return ResourceManager.GetString("XmlReaderCreateInsecureConstructedMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A potentially insecure XmlReaderSettings instance is provided to XmlReader.Create method..
        /// </summary>
        internal static string XmlReaderCreateInsecureInputMessage {
            get {
                return ResourceManager.GetString("XmlReaderCreateInsecureInputMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An insecure overload of XmlReader.Create which does not accept an XmlReaderSettings argument..
        /// </summary>
        internal static string XmlReaderCreateWrongOverloadMessage {
            get {
                return ResourceManager.GetString("XmlReaderCreateWrongOverloadMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XmlTextReader instance created with insecure default settings..
        /// </summary>
        internal static string XmlTextReaderConstructedWithNoSecureResolutionMessage {
            get {
                return ResourceManager.GetString("XmlTextReaderConstructedWithNoSecureResolutionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Constructor of XmlTextReader derived class {0} uses insecure default values for DTD processing..
        /// </summary>
        internal static string XmlTextReaderDerivedClassConstructorNoSecureSettingsMessage {
            get {
                return ResourceManager.GetString("XmlTextReaderDerivedClassConstructorNoSecureSettingsMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XmlTextReader derived class {0} doesn&apos;t explictily define a constructor..
        /// </summary>
        internal static string XmlTextReaderDerivedClassNoConstructorMessage {
            get {
                return ResourceManager.GetString("XmlTextReaderDerivedClassNoConstructorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} method of XmlTextReader derived class sets XmlResolver and/or DtdProcessing property to insecure value..
        /// </summary>
        internal static string XmlTextReaderDerivedClassSetInsecureSettingsInMethodMessage {
            get {
                return ResourceManager.GetString("XmlTextReaderDerivedClassSetInsecureSettingsInMethodMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XmlTextReader instance is set with insecure values..
        /// </summary>
        internal static string XmlTextReaderSetInsecureResolutionMessage {
            get {
                return ResourceManager.GetString("XmlTextReaderSetInsecureResolutionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In {0} an insecure combination of XsltSettings and XmlResolver instances are provided to XslCompiledTransfor.Load as arguments..
        /// </summary>
        internal static string XslCompiledTransformLoadInsecureConstructedMessage {
            get {
                return ResourceManager.GetString("XslCompiledTransformLoadInsecureConstructedMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In {0} an insecure combination of XsltSettings and XmlResolver instances are provided to XslCompiledTransfor.Load as arguments..
        /// </summary>
        internal static string XslCompiledTransformLoadInsecureInputMessage {
            get {
                return ResourceManager.GetString("XslCompiledTransformLoadInsecureInputMessage", resourceCulture);
            }
        }
    }
}

<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="SpecifyMessageBoxOptionsTitle" xml:space="preserve">
    <value>Specify MessageBoxOptions</value>
  </data>
  <data name="SpecifyMessageBoxOptionsDescription" xml:space="preserve">
    <value>To correctly display a message box for cultures that use a right-to-left reading order, the RightAlign and RtlReading members of the MessageBoxOptions enumeration must be passed to the Show method.</value>
  </data>
  <data name="SpecifyMessageBoxOptionsMessage" xml:space="preserve">
    <value>Specify MessageBoxOptions</value>
  </data>
  <data name="AvoidDuplicateAcceleratorsTitle" xml:space="preserve">
    <value>Avoid duplicate accelerators</value>
  </data>
  <data name="AvoidDuplicateAcceleratorsDescription" xml:space="preserve">
    <value>An access key, also known as an accelerator, enables keyboard access to a control by using the ALT key. When multiple controls have duplicate access keys, the behavior of the access key is not well defined.</value>
  </data>
  <data name="AvoidDuplicateAcceleratorsMessage" xml:space="preserve">
    <value>Avoid duplicate accelerators</value>
  </data>
  <data name="SetLocaleForDataTypesTitle" xml:space="preserve">
    <value>Set locale for data types</value>
  </data>
  <data name="SetLocaleForDataTypesDescription" xml:space="preserve">
    <value>The locale determines culture-specific presentation elements for data, such as formatting that is used for numeric values, currency symbols, and sort order. When you create a DataTable or DataSet, you should explicitly set the locale.</value>
  </data>
  <data name="SetLocaleForDataTypesMessage" xml:space="preserve">
    <value>Set locale for data types</value>
  </data>
  <data name="DoNotMarkServicedComponentsWithWebMethodTitle" xml:space="preserve">
    <value>Do not mark serviced components with WebMethod</value>
  </data>
  <data name="DoNotMarkServicedComponentsWithWebMethodDescription" xml:space="preserve">
    <value>A method in a type that inherits from System.EnterpriseServices.ServicedComponent is marked by using System.Web.Services.WebMethodAttribute. Because WebMethodAttribute and a ServicedComponent method have conflicting behavior and requirements for context and transaction flow, the behavior of the method will be incorrect in some scenarios.</value>
  </data>
  <data name="DoNotMarkServicedComponentsWithWebMethodMessage" xml:space="preserve">
    <value>Do not mark serviced components with WebMethod</value>
  </data>
  <data name="ImplementSerializationConstructorsTitle" xml:space="preserve">
    <value>Implement serialization constructors</value>
  </data>
  <data name="ImplementSerializationConstructorsDescription" xml:space="preserve">
    <value>To fix a violation of this rule, implement the serialization constructor. For a sealed class, make the constructor private; otherwise, make it protected.</value>
  </data>
  <data name="ImplementSerializationConstructorsMessageCreateMagicConstructor" xml:space="preserve">
    <value>Add a constructor to {0} with the following signature: 'protected {0}(SerializationInfo info, StreamingContext context)'.</value>
  </data>
  <data name="ImplementSerializationConstructorsMessageMakeUnsealedMagicConstructorFamily" xml:space="preserve">
    <value>Declare the serialization constructor of {0}, an unsealed type, as protected.</value>
  </data>
  <data name="ImplementSerializationConstructorsMessageMakeSealedMagicConstructorPrivate" xml:space="preserve">
    <value>Declare the serialization constructor of {0}, a sealed type, as private.</value>
  </data>
  <data name="ImplementSerializationConstructorsCodeActionTitle" xml:space="preserve">
    <value>Implement Serialization constructor</value>
  </data>
  <data name="MarkWindowsFormsEntryPointsWithStaThreadTitle" xml:space="preserve">
    <value>Mark Windows Forms entry points with STAThread</value>
  </data>
  <data name="MarkWindowsFormsEntryPointsWithStaThreadDescription" xml:space="preserve">
    <value>STAThreadAttribute indicates that the COM threading model for the application is a single-threaded apartment. This attribute must be present on the entry point of any application that uses Windows Forms; if it is omitted, the Windows components might not work correctly.</value>
  </data>
  <data name="MarkWindowsFormsEntryPointsWithStaThreadMessage" xml:space="preserve">
    <value>Mark Windows Forms entry points with STAThread</value>
  </data>
  <data name="MarkAllNonSerializableFieldsTitle" xml:space="preserve">
    <value>Mark all non-serializable fields</value>
  </data>
  <data name="MarkAllNonSerializableFieldsDescription" xml:space="preserve">
    <value>An instance field of a type that is not serializable is declared in a type that is serializable.</value>
  </data>
  <data name="MarkAllNonSerializableFieldsMessage" xml:space="preserve">
    <value>Field {0} is a member of type {1} which is serializable but is of type {2} which is not serializable</value>
  </data>
  <data name="CallBaseClassMethodsOnISerializableTypesTitle" xml:space="preserve">
    <value>Call base class methods on ISerializable types</value>
  </data>
  <data name="CallBaseClassMethodsOnISerializableTypesDescription" xml:space="preserve">
    <value>To fix a violation of this rule, call the base type GetObjectData method or serialization constructor from the corresponding derived type method or constructor.</value>
  </data>
  <data name="CallBaseClassMethodsOnISerializableTypesMessage" xml:space="preserve">
    <value>Call base class methods on ISerializable types</value>
  </data>
  <data name="MarkISerializableTypesWithSerializableTitle" xml:space="preserve">
    <value>Mark ISerializable types with serializable</value>
  </data>
  <data name="MarkISerializableTypesWithSerializableDescription" xml:space="preserve">
    <value>To be recognized by the common language runtime as serializable, types must be marked by using the SerializableAttribute attribute even when the type uses a custom serialization routine through implementation of the ISerializable interface.</value>
  </data>
  <data name="MarkISerializableTypesWithSerializableMessage" xml:space="preserve">
    <value>Add [Serializable] to {0} as this type implements ISerializable</value>
  </data>
  <data name="AddSerializableAttributeCodeActionTitle" xml:space="preserve">
    <value>Add Serializable attribute</value>
  </data>
  <data name="AddNonSerializedAttributeCodeActionTitle" xml:space="preserve">
    <value>Add the 'NonSerialized' attribute to this field.</value>
  </data>
  <data name="ImplementSerializationMethodsCorrectlyTitle" xml:space="preserve">
    <value>Implement serialization methods correctly</value>
  </data>
  <data name="ImplementSerializationMethodsCorrectlyDescription" xml:space="preserve">
    <value>A method that handles a serialization event does not have the correct signature, return type, or visibility.</value>
  </data>
  <data name="ImplementSerializationMethodsCorrectlyMessageVisibility" xml:space="preserve">
    <value>Because {0} is marked with OnSerializing, OnSerialized, OnDeserializing, or OnDeserialized, change its accessibility to private.</value>
  </data>
  <data name="ImplementSerializationMethodsCorrectlyMessageReturnType" xml:space="preserve">
    <value>Because {0} is marked with OnSerializing, OnSerialized, OnDeserializing, or OnDeserialized, change its return type from {1} to void (Sub in Visual Basic).</value>
  </data>
  <data name="ImplementSerializationMethodsCorrectlyMessageParameters" xml:space="preserve">
    <value>Because {0} is marked with OnSerializing, OnSerialized, OnDeserializing, or OnDeserialized, change its signature so that it takes a single parameter of type 'System.Runtime.Serialization.StreamingContext'.</value>
  </data>
  <data name="ImplementSerializationMethodsCorrectlyMessageGeneric" xml:space="preserve">
    <value>Because {0} is marked with OnSerializing, OnSerialized, OnDeserializing, or OnDeserialized, change its signature so that it is no longer generic.</value>
  </data>
  <data name="ImplementSerializationMethodsCorrectlyMessageStatic" xml:space="preserve">
    <value>Because {0} is marked with OnSerializing, OnSerialized, OnDeserializing, or OnDeserialized, change it from static (Shared in Visual Basic) to an instance method.</value>
  </data>
  <data name="ProvideDeserializationMethodsForOptionalFieldsTitle" xml:space="preserve">
    <value>Provide deserialization methods for optional fields</value>
  </data>
  <data name="ProvideDeserializationMethodsForOptionalFieldsDescription" xml:space="preserve">
    <value>A type has a field that is marked by using the System.Runtime.Serialization.OptionalFieldAttribute attribute, and the type does not provide deserialization event handling methods.</value>
  </data>
  <data name="ProvideDeserializationMethodsForOptionalFieldsMessageOnDeserialized" xml:space="preserve">
    <value>Add a 'private void OnDeserialized(StreamingContext)' method to type {0} and attribute it with the System.Runtime.Serialization.OnDeserializedAttribute.</value>
  </data>
  <data name="ProvideDeserializationMethodsForOptionalFieldsMessageOnDeserializing" xml:space="preserve">
    <value>Add a 'private void OnDeserializing(StreamingContext)' method to type {0} and attribute it with the System.Runtime.Serialization.OnDeserializingAttribute.</value>
  </data>
  <data name="ImplementISerializableCorrectlyTitle" xml:space="preserve">
    <value>Implement ISerializable correctly</value>
  </data>
  <data name="ImplementISerializableCorrectlyDescription" xml:space="preserve">
    <value>To fix a violation of this rule, make the GetObjectData method visible and overridable, and make sure that all instance fields are included in the serialization process or explicitly marked by using the NonSerializedAttribute attribute.</value>
  </data>
  <data name="ImplementISerializableCorrectlyMessageDefault" xml:space="preserve">
    <value>Add an implementation of GetObjectData to type {0}.</value>
  </data>
  <data name="ImplementISerializableCorrectlyMessageMakeVisible" xml:space="preserve">
    <value>Increase the accessibility of {0}.GetObjectData so that it is visible to derived types.</value>
  </data>
  <data name="ImplementISerializableCorrectlyMessageMakeOverridable" xml:space="preserve">
    <value>Make {0}.GetObjectData virtual and overridable.</value>
  </data>
  <data name="UseXmlReaderForDataSetReadXmlTitle" xml:space="preserve">
    <value>Use XmlReader for DataSet ReadXml</value>
  </data>
  <data name="UseXmlReaderForDataSetReadXmlDescription" xml:space="preserve">
    <value>Do not use unsafe overloads of System.Data.DataSet.ReadXml. This API internally enables DTD processing on the XML reader instance used, and uses UrlResolver for resolving external XML entities. The outcome is information disclosure. Content from file system or network shares for the machine processing the XML can be exposed to attacker. In addition, an attacker can use this as a DoS vector.</value>
  </data>
  <data name="UseXmlReaderForDataSetReadXmlMessage" xml:space="preserve">
    <value>Use XmlReader for DataSet ReadXml</value>
  </data>
  <data name="UseXmlReaderForDataSetReadXmlSchemaTitle" xml:space="preserve">
    <value>Use XmlReader for DataSet ReadXmlSchema</value>
  </data>
  <data name="UseXmlReaderForDataSetReadXmlSchemaDescription" xml:space="preserve">
    <value>Do not use unsafe overloads of System.Data.DataSet.ReadXmlSchema. This API internally enables DTD processing on the XML reader instance used, and uses UrlResolver for resolving external XML entities. The outcome is information disclosure. Content from file system or network shares for the machine processing the XML can be exposed to attacker. In addition, an attacker can use this as a DoS vector.</value>
  </data>
  <data name="UseXmlReaderForDataSetReadXmlSchemaMessage" xml:space="preserve">
    <value>Use XmlReader for DataSet ReadXmlSchema</value>
  </data>
  <data name="ReviewDataViewCollectionStringTitle" xml:space="preserve">
    <value>Review DataView CollectionString</value>
  </data>
  <data name="ReviewDataViewCollectionStringDescription" xml:space="preserve">
    <value>Review code to insure that usage of System.Data.DataViewManager.DataViewSettingCollectionString input is sanitized to not contain DTD. Enabling DTD processing on the XML reader and using UrlResolver for resolving external XML entities may lead to information disclosure. Content from file system or network shares for the machine processing the XML can be exposed to attacker. In addition, an attacker can use this as a DoS vector.</value>
  </data>
  <data name="ReviewDataViewCollectionStringMessage" xml:space="preserve">
    <value>Review DataView CollectionString</value>
  </data>
  <data name="UseXmlReaderForDataTableReadXmlTitle" xml:space="preserve">
    <value>Use XmlReader for DataTable ReadXml</value>
  </data>
  <data name="UseXmlReaderForDataTableReadXmlDescription" xml:space="preserve">
    <value>Do not use unsafe overloads of System.Data.DataTable.ReadXml. This API internally enables DTD processing on the XML reader instance used, and uses UrlResolver for resolving external XML entities. The outcome is information disclosure. Content from file system or network shares for the machine processing the XML can be exposed to attacker. In addition, an attacker can use this as a DoS vector.</value>
  </data>
  <data name="UseXmlReaderForDataTableReadXmlMessage" xml:space="preserve">
    <value>Use XmlReader for DataTable ReadXml</value>
  </data>
  <data name="UseXmlReaderForDataTableReadXmlSchemaTitle" xml:space="preserve">
    <value>Use XmlReader for DataTable ReadXmlSchema</value>
  </data>
  <data name="UseXmlReaderForDataTableReadXmlSchemaDescription" xml:space="preserve">
    <value>Checks for usage of an unsafe overload of  System.Data.DataTable.ReadXmlSchema. This API internally enables DTD processing on the XML reader instance used, and uses UrlResolver for resolving external XML entities. The outcome is information disclosure. Content from file system or network shares for the machine processing the XML can be exposed to attacker. In addition, an attacker can use this as a DoS vector.</value>
  </data>
  <data name="UseXmlReaderForDataTableReadXmlSchemaMessage" xml:space="preserve">
    <value>Use XmlReader for DataTable ReadXmlSchema</value>
  </data>
  <data name="DoNotCatchCorruptedStateExceptions" xml:space="preserve">
    <value>Do Not Catch Corrupted State Exceptions</value>
  </data>
  <data name="DoNotCatchCorruptedStateExceptionsDescription" xml:space="preserve">
    <value>Catching corrupted state exceptions could mask errors (such as access violations), resulting in inconsistent state of execution or making it easier for attackers to compromise system. Instead, catch and handle a more specific set of exception type(s) or re-throw the exception</value>
  </data>
  <data name="DoNotCatchCorruptedStateExceptionsMessage" xml:space="preserve">
    <value>{0} is catching corrupted state exception.</value>
  </data>
  <data name="DoNotUseBrokenCryptographicAlgorithms" xml:space="preserve">
    <value>Do Not Use Broken Cryptographic Algorithms</value>
  </data>
  <data name="DoNotUseBrokenCryptographicAlgorithmsDescription" xml:space="preserve">
    <value>An attack making it computationally feasible to break this algorithm exists. This allows attackers to break the cryptographic guarantees it is designed to provide. Depending on the type and application of this cryptographic algorithm, this may allow attackers to read enciphered messages, tamper with enciphered  messages, forge digital signatures, tamper with hashed content, or otherwise compromise any cryptosystem based on this algorithm. Replace encryption uses with the AES algorithm (AES-256, AES-192 and AES-128 are acceptable) with a key length greater than or equal to 128 bits. Replace hashing uses with a hashing function in the SHA-2 family, such as SHA512, SHA384, or SHA256. Replace digital signature uses with RSA with a key length greater than or equal to 2048-bits, or ECDSA with a key length greater than or equal to 256 bits.</value>
  </data>
  <data name="DoNotUseBrokenCryptographicAlgorithmsMessage" xml:space="preserve">
    <value>{0} uses a broken cryptographic algorithm {1}</value>
  </data>
  <data name="DoNotUseWeakCryptographicAlgorithms" xml:space="preserve">
    <value>Do Not Use Weak Cryptographic Algorithms</value>
  </data>
  <data name="DoNotUseWeakCryptographicAlgorithmsDescription" xml:space="preserve">
    <value>Cryptographic algorithms degrade over time as attacks become for advances to attacker get access to more computation. Depending on the type and application of this cryptographic algorithm, further degradation of the cryptographic strength of it may allow attackers to read enciphered messages, tamper with enciphered  messages, forge digital signatures, tamper with hashed content, or otherwise compromise any cryptosystem based on this algorithm. Replace encryption uses with the AES algorithm (AES-256, AES-192 and AES-128 are acceptable) with a key length greater than or equal to 128 bits. Replace hashing uses with a hashing function in the SHA-2 family, such as SHA-2 512, SHA-2 384, or SHA-2 256.</value>
  </data>
  <data name="DoNotUseWeakCryptographicAlgorithmsMessage" xml:space="preserve">
    <value>{0} uses a weak cryptographic algorithm {1}</value>
  </data>
  <data name="TypesShouldNotExtendCertainBaseTypesTitle" xml:space="preserve">
    <value>Types should not extend certain base types</value>
  </data>
  <data name="TypesShouldNotExtendCertainBaseTypesDescription" xml:space="preserve">
    <value>An externally visible type extends certain base types. Use one of the alternatives.</value>
  </data>
  <data name="TypesShouldNotExtendCertainBaseTypesMessageSystemXmlXmlDocument" xml:space="preserve">
    <value>Change the base type of {0} so that it no longer extends {1}. The preferred design is to decouple the underlying XmlDocument representation from the type's interface by using containment instead of inheritance.</value>
  </data>
  <data name="TypesShouldNotExtendCertainBaseTypesMessageSystemApplicationException" xml:space="preserve">
    <value>Change the base type of {0} so that it no longer extends {1}. This base exception type does not provide any additional value for framework classes. Extend 'System.Exception' or an existing unsealed exception type instead. Do not create a new exception base type unless there is specific value in enabling the creation of a catch handler for an entire class of exceptions.</value>
  </data>
  <data name="TypesShouldNotExtendCertainBaseTypesMessageSystemCollectionsCollectionBase" xml:space="preserve">
    <value>Change the base type of {0} from {1} to its generic equivalent 'System.Collections.ObjectModel.Collection'.</value>
  </data>
  <data name="TypesShouldNotExtendCertainBaseTypesMessageSystemCollectionsDictionaryBase" xml:space="preserve">
    <value>Change the base type of {0} from {1} to its generic equivalent 'System.Collections.ObjectModel.KeyedCollection'.</value>
  </data>
  <data name="TypesShouldNotExtendCertainBaseTypesMessageSystemCollectionsQueue" xml:space="preserve">
    <value>Change the base type of {0} from {1} to its generic equivalent 'System.Collections.Generic.Queue'.</value>
  </data>
  <data name="TypesShouldNotExtendCertainBaseTypesMessageSystemCollectionsReadOnlyCollectionBase" xml:space="preserve">
    <value>Change the base type of {0} from {1} to its generic equivalent 'System.Collections.ObjectModel.ReadOnlyCollection'.</value>
  </data>
  <data name="TypesShouldNotExtendCertainBaseTypesMessageSystemCollectionsSortedList" xml:space="preserve">
    <value>Change the base type of {0} from {1} to its generic equivalent 'System.Collections.Generic.SortedList'.</value>
  </data>
  <data name="TypesShouldNotExtendCertainBaseTypesMessageSystemCollectionsStack" xml:space="preserve">
    <value>Change the base type of {0} from {1} to its generic equivalent 'System.Collections.Generic.Stack'.</value>
  </data>
  <data name="DoNotUseInsecureDtdProcessingDescription" xml:space="preserve">
    <value>Using XmlTextReader.Load(), creating an insecure XmlReaderSettings instance when invoking XmlReader.Create(), setting the InnerXml property of the XmlDocument and enabling DTD processing using XmlUrlResolver insecurely can lead to information disclosure. Replace it with a call to the Load() method overload that takes an XmlReader instance, use XmlReader.Create() to accept XmlReaderSettings arguments or consider explicitly setting secure values. The DataViewSettingCollectionString property of DataViewManager should always be assigned from a trusted source, the DtdProcessing property should be set to false, and the XmlResolver property should be changed to XmlSecureResolver or null. </value>
    <comment>CA3075</comment>
  </data>
  <data name="DoNotUseDtdProcessingOverloadsMessage" xml:space="preserve">
    <value>Unsafe overload of '{0}' method</value>
    <comment>CA3075</comment>
  </data>
  <data name="DoNotUseDtdProcessingOverloads" xml:space="preserve">
    <value>Insecure DTD Processing</value>
    <comment>CA3075</comment>
  </data>
  <data name="DoNotUseSetInnerXmlMessage" xml:space="preserve">
    <value>Uses the unsafe setter of InnerXml property of System.Xml.XmlDocument.</value>
    <comment>CA3075</comment>
  </data>
  <data name="InsecureXmlDtdProcessing" xml:space="preserve">
    <value>Insecure DTD processing in XML</value>
    <comment>CA3075</comment>
  </data>
  <data name="ReviewDtdProcessingPropertiesMessage" xml:space="preserve">
    <value>Property in {0} might be set from an untrusted source.</value>
    <comment>CA3075</comment>
  </data>
  <data name="XmlDocumentWithNoSecureResolverMessage" xml:space="preserve">
    <value>An XmlDocument instance is created without setting its XmlResolver property to a secure value.</value>
    <comment>CA3075</comment>
  </data>
  <data name="XmlReaderCreateInsecureConstructedMessage" xml:space="preserve">
    <value>An insecure XmlReaderSettings instance is provided to XmlReader.Create method.</value>
    <comment>CA3075</comment>
  </data>
  <data name="XmlReaderCreateInsecureInputMessage" xml:space="preserve">
    <value>A potentially insecure XmlReaderSettings instance is provided to XmlReader.Create method.</value>
    <comment>CA3075</comment>
  </data>
  <data name="XmlReaderCreateWrongOverloadMessage" xml:space="preserve">
    <value>An insecure overload of XmlReader.Create which does not accept an XmlReaderSettings argument.</value>
    <comment>CA3075</comment>
  </data>
  <data name="XmlTextReaderConstructedWithNoSecureResolutionMessage" xml:space="preserve">
    <value>XmlTextReader instance created with insecure default settings.</value>
    <comment>CA3075</comment>
  </data>
  <data name="XmlTextReaderSetInsecureResolutionMessage" xml:space="preserve">
    <value>XmlTextReader instance is set with insecure values.</value>
    <comment>CA3075</comment>
  </data>
  <data name="DoNotUseInsecureDtdProcessingGenericMessage" xml:space="preserve">
    <value>{0}</value>
    <comment>CA3075</comment>
  </data>
  <data name="InsecureDtdProcessingInApiDesign" xml:space="preserve">
    <value>Insecure Processing in API Design, XmlDocument and XmlTextReader</value>
    <comment>CA3077</comment>
  </data>
  <data name="DoNotUseInsecureDtdProcessingInApiDesignDescription" xml:space="preserve">
    <value>Enabling DTD processing on all instances derived from XmlTextReader or  XmlDocument and using XmlUrlResolver for resolving external XML entities may lead to information disclosure. Ensure to set the XmlResolver property to null, create an instance of XmlSecureResolver when processing untrusted input, or use XmlReader.Create method with a secure XmlReaderSettings argument. Unless you need to enable it, ensure the DtdProcessing property is set to false. </value>
    <comment>CA3077</comment>
  </data>
  <data name="XmlDocumentDerivedClassConstructorNoSecureXmlResolverMessage" xml:space="preserve">
    <value>Constructor of XmlDocument derived class {0} implicitly uses insecure default value for DTD processing.</value>
    <comment>CA3077</comment>
  </data>
  <data name="XmlDocumentDerivedClassNoConstructorMessage" xml:space="preserve">
    <value>XmlDocument derived class {0} doesn't explictily define a constructor.</value>
    <comment>CA3077</comment>
  </data>
  <data name="XmlDocumentDerivedClassSetInsecureXmlResolverInMethodMessage" xml:space="preserve">
    <value>Method {0} of XmlDocument derived class sets XmlResolver property to an insecure value.</value>
    <comment>CA3077</comment>
  </data>
  <data name="XmlTextReaderDerivedClassConstructorNoSecureSettingsMessage" xml:space="preserve">
    <value>Constructor of XmlTextReader derived class {0} uses insecure default values for DTD processing.</value>
    <comment>CA3077</comment>
  </data>
  <data name="XmlTextReaderDerivedClassNoConstructorMessage" xml:space="preserve">
    <value>XmlTextReader derived class {0} doesn't explictily define a constructor.</value>
    <comment>CA3077</comment>
  </data>
  <data name="XmlTextReaderDerivedClassSetInsecureSettingsInMethodMessage" xml:space="preserve">
    <value>{0} method of XmlTextReader derived class sets XmlResolver and/or DtdProcessing property to insecure value.</value>
    <comment>CA3077</comment>
  </data>
  <data name="InsecureXsltScriptProcessingMessage" xml:space="preserve">
    <value>Insecure XSLT script processing.</value>
    <comment>CA3076</comment>
  </data>
  <data name="DoNotUseInsecureXSLTScriptExecutionDescription" xml:space="preserve">
    <value>Providing an insecure XsltSettings instance and an insecure XmlResolver instance to XslCompiledTransform.Load method is potentially unsafe as it allows processing script within XSL, which on an untrusted XSL input may lead to malicious code execution. Either replace the insecure XsltSettings argument with XsltSettings.Default or an instance that has disabled document function and script execution, or replace the XmlResolver argurment with null or an XmlSecureResolver instance. This message may be suppressed if the input is known to be from a trusted source and external resource resolution from locations that are not known in advance must be supported.</value>
    <comment>CA3076</comment>
  </data>
  <data name="XslCompiledTransformLoadInsecureConstructedMessage" xml:space="preserve">
    <value>In {0} an insecure combination of XsltSettings and XmlResolver instances are provided to XslCompiledTransfor.Load as arguments.</value>
    <comment>CA3076</comment>
  </data>
  <data name="XslCompiledTransformLoadInsecureInputMessage" xml:space="preserve">
    <value>In {0} an insecure combination of XsltSettings and XmlResolver instances are provided to XslCompiledTransfor.Load as arguments.</value>
    <comment>CA3076</comment>
  </data>
</root>
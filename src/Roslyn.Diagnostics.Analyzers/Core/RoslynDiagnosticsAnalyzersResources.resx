<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>

  <data name="UseSpecializedCollectionsEmptyEnumerableTitle" xml:space="preserve">
    <value>Use SpecializedCollections.EmptyEnumerable()</value>
  </data>
  <data name="UseSpecializedCollectionsEmptyEnumerableDescription" xml:space="preserve">
    <value>#N/A</value>
  </data>
  <data name="UseSpecializedCollectionsEmptyEnumerableMessage" xml:space="preserve">
    <value>Use SpecializedCollections.EmptyEnumerable()</value>
  </data>
  <data name="UseSpecializedCollectionsSingletonEnumerableTitle" xml:space="preserve">
    <value>Use SpecializedCollections.SingletonEnumerable()</value>
  </data>
  <data name="UseSpecializedCollectionsSingletonEnumerableDescription" xml:space="preserve">
    <value>#N/A</value>
  </data>
  <data name="UseSpecializedCollectionsSingletonEnumerableMessage" xml:space="preserve">
    <value>Use SpecializedCollections.SingletonEnumerable()</value>
  </data>
  <data name="InvokeTheCorrectPropertyToEnsureCorrectUseSiteDiagnosticsTitle" xml:space="preserve">
    <value>Invoke the correct property to ensure correct use site diagnostics.</value>
  </data>
  <data name="InvokeTheCorrectPropertyToEnsureCorrectUseSiteDiagnosticsDescription" xml:space="preserve">
    <value>#N/A</value>
  </data>
  <data name="InvokeTheCorrectPropertyToEnsureCorrectUseSiteDiagnosticsMessage" xml:space="preserve">
    <value>Invoke the correct property to ensure correct use site diagnostics.</value>
  </data>
  <data name="DoNotUseGenericCodeActionCreateToCreateCodeActionTitle" xml:space="preserve">
    <value>Do not use generic CodeAction.Create to create CodeAction</value>
  </data>
  <data name="DoNotUseGenericCodeActionCreateToCreateCodeActionDescription" xml:space="preserve">
    <value>#N/A</value>
  </data>
  <data name="DoNotUseGenericCodeActionCreateToCreateCodeActionMessage" xml:space="preserve">
    <value>Do not use generic CodeAction.Create to create CodeAction</value>
  </data>
  <data name="OverrideObjectEqualsObjectWhenImplementingIequatableTitle" xml:space="preserve">
    <value>Override Object.Equals(object) when implementing Iequatable</value>
  </data>
  <data name="OverrideObjectEqualsObjectWhenImplementingIequatableDescription" xml:space="preserve">
    <value>#N/A</value>
  </data>
  <data name="OverrideObjectEqualsObjectWhenImplementingIequatableMessage" xml:space="preserve">
    <value>Override Object.Equals(object) when implementing Iequatable</value>
  </data>
  <data name="DoNotInvokeDiagnosticDescriptorTitle" xml:space="preserve">
    <value>Do not invoke Diagnostic.Descriptor</value>
  </data>
  <data name="DoNotInvokeDiagnosticDescriptorDescription" xml:space="preserve">
    <value>Accessing the Descriptor property of Diagnostic in compiler layer leads to unnecessary string allocations for fields of the descriptor that are not utilized in command line compilation. Hence, you should avoid accessing the Descriptor of the compiler diagnostics here. Instead you should directly access these properties off the Diagnostic type.</value>
  </data>
  <data name="DoNotInvokeDiagnosticDescriptorMessage" xml:space="preserve">
    <value>Do not invoke Diagnostic.Descriptor</value>
  </data>
  <data name="AddPublicTypesAndMembersToTheDeclaredAPITitle" xml:space="preserve">
    <value>Add public types and members to the declared API</value>
  </data>
  <data name="AddPublicTypesAndMembersToTheDeclaredAPIDescription" xml:space="preserve">
    <value>All public types and members should be declared in PublicAPI.txt. This draws attention to API changes in the code reviews and source control history, and helps prevent breaking changes.</value>
  </data>
  <data name="AddPublicTypesAndMembersToTheDeclaredAPIMessage" xml:space="preserve">
    <value>Add public types and members to the declared API</value>
  </data>
  <data name="RemoveDeletedTypesAndMembersFromTheDeclaredAPITitle" xml:space="preserve">
    <value>Remove deleted types and members from the declared API</value>
  </data>
  <data name="RemoveDeletedTypesAndMembersFromTheDeclaredAPIDescription" xml:space="preserve">
    <value>When removing a public type or member the corresponding entry in PublicAPI.txt should also be removed. This draws attention to API changes in the code reviews and source control history, and helps prevent breaking changes.</value>
  </data>
  <data name="RemoveDeletedTypesAndMembersFromTheDeclaredAPIMessage" xml:space="preserve">
    <value>Remove deleted types and members from the declared API</value>
  </data>
  <data name="SymbolDeclaredEventMustBeGeneratedForSourceSymbolsTitle" xml:space="preserve">
    <value>SymbolDeclaredEvent must be generated for source symbols</value>
  </data>
  <data name="SymbolDeclaredEventMustBeGeneratedForSourceSymbolsDescription" xml:space="preserve">
    <value>Compilation event queue is required to generate symbol declared events for all declared source symbols. Hence, every source symbol type or one of it's base types must generate a symbol declared event.</value>
  </data>
  <data name="SymbolDeclaredEventMustBeGeneratedForSourceSymbolsMessage" xml:space="preserve">
    <value>SymbolDeclaredEvent must be generated for source symbols</value>
  </data>
  <data name="TheContentsOfThePublicAPIFilesAreInvalidTitle" xml:space="preserve">
    <value>The contents of the public API files are invalid</value>
  </data>
  <data name="TheContentsOfThePublicAPIFilesAreInvalidDescription" xml:space="preserve">
    <value>#N/A</value>
  </data>
  <data name="TheContentsOfThePublicAPIFilesAreInvalidMessage" xml:space="preserve">
    <value>The contents of the public API files are invalid</value>
  </data>
  <data name="CategoryApiDesign" xml:space="preserve">
    <value>ApiDesign</value>
  </data>
  <data name="CategoryPerformance" xml:space="preserve">
    <value>Performance</value>
  </data>
  <data name="CategoryReliability" xml:space="preserve">
    <value>Reliability</value>
  </data>
  <data name="CategoryUsage" xml:space="preserve">
    <value>Usage</value>
  </data>
</root>
<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en" target-language="ru" original="../RoslynDiagnosticsAnalyzersResources.resx">
    <body>
      <trans-unit id="CodeMayHaveMainThreadDependencyDescription">
        <source>Code may have main thread dependency</source>
        <target state="new">Code may have main thread dependency</target>
        <note />
      </trans-unit>
      <trans-unit id="CodeMayHaveMainThreadDependencyMessage">
        <source>Code may have main thread dependency</source>
        <target state="new">Code may have main thread dependency</target>
        <note />
      </trans-unit>
      <trans-unit id="CodeMayHaveMainThreadDependencyTitle">
        <source>Code may have main thread dependency</source>
        <target state="new">Code may have main thread dependency</target>
        <note />
      </trans-unit>
      <trans-unit id="ExportedPartsShouldHaveImportingConstructorCodeFix_ImplicitConstructor">
        <source>Explicitly define the importing constructor</source>
        <target state="new">Explicitly define the importing constructor</target>
        <note />
      </trans-unit>
      <trans-unit id="ExportedPartsShouldHaveImportingConstructorCodeFix_MissingAttribute">
        <source>Add 'ImportingConstructor' attribute</source>
        <target state="new">Add 'ImportingConstructor' attribute</target>
        <note />
      </trans-unit>
      <trans-unit id="ExportedPartsShouldHaveImportingConstructorCodeFix_NonPublicConstructor">
        <source>Make constructor public</source>
        <target state="new">Make constructor public</target>
        <note />
      </trans-unit>
      <trans-unit id="ExportedPartsShouldHaveImportingConstructorDescription">
        <source>Exported parts should have [ImportingConstructor]</source>
        <target state="new">Exported parts should have [ImportingConstructor]</target>
        <note />
      </trans-unit>
      <trans-unit id="ExportedPartsShouldHaveImportingConstructorMessage">
        <source>'{0}' is MEF-exported and should have a single importing constructor of the correct form</source>
        <target state="new">'{0}' is MEF-exported and should have a single importing constructor of the correct form</target>
        <note />
      </trans-unit>
      <trans-unit id="ExportedPartsShouldHaveImportingConstructorTitle">
        <source>Exported parts should have [ImportingConstructor]</source>
        <target state="new">Exported parts should have [ImportingConstructor]</target>
        <note />
      </trans-unit>
      <trans-unit id="ImplementWithNoMainThreadDependencyDescription">
        <source>Implement with no main thread dependency</source>
        <target state="new">Implement with no main thread dependency</target>
        <note />
      </trans-unit>
      <trans-unit id="ImplementWithNoMainThreadDependencyMessage">
        <source>Implement with no main thread dependency</source>
        <target state="new">Implement with no main thread dependency</target>
        <note />
      </trans-unit>
      <trans-unit id="ImplementWithNoMainThreadDependencyTitle">
        <source>Implement with no main thread dependency</source>
        <target state="new">Implement with no main thread dependency</target>
        <note />
      </trans-unit>
      <trans-unit id="ImportingConstructorShouldBeObsoleteCodeFix_ErrorSetToFalse">
        <source>Set ObsoleteAttribute.Error to true</source>
        <target state="new">Set ObsoleteAttribute.Error to true</target>
        <note />
      </trans-unit>
      <trans-unit id="ImportingConstructorShouldBeObsoleteCodeFix_IncorrectDescription">
        <source>Use correct ObsoleteAttribute message</source>
        <target state="new">Use correct ObsoleteAttribute message</target>
        <note />
      </trans-unit>
      <trans-unit id="ImportingConstructorShouldBeObsoleteCodeFix_MissingAttribute">
        <source>Add ObsoleteAttribute</source>
        <target state="new">Add ObsoleteAttribute</target>
        <note />
      </trans-unit>
      <trans-unit id="ImportingConstructorShouldBeObsoleteCodeFix_MissingDescription">
        <source>Configure ObsoleteAttribute for importing constructor</source>
        <target state="new">Configure ObsoleteAttribute for importing constructor</target>
        <note />
      </trans-unit>
      <trans-unit id="ImportingConstructorShouldBeObsoleteCodeFix_MissingError">
        <source>Set ObsoleteAttribute.Error to true</source>
        <target state="new">Set ObsoleteAttribute.Error to true</target>
        <note />
      </trans-unit>
      <trans-unit id="ImportingConstructorShouldBeObsoleteDescription">
        <source>Importing constructor should be [Obsolete]</source>
        <target state="new">Importing constructor should be [Obsolete]</target>
        <note />
      </trans-unit>
      <trans-unit id="ImportingConstructorShouldBeObsoleteMessage">
        <source>Importing constructor should be [Obsolete]</source>
        <target state="new">Importing constructor should be [Obsolete]</target>
        <note />
      </trans-unit>
      <trans-unit id="ImportingConstructorShouldBeObsoleteTitle">
        <source>Importing constructor should be [Obsolete]</source>
        <target state="new">Importing constructor should be [Obsolete]</target>
        <note />
      </trans-unit>
      <trans-unit id="TestExportsShouldNotBeDiscoverableCodeFix">
        <source>Apply PartNotDiscoverableAttribute</source>
        <target state="new">Apply PartNotDiscoverableAttribute</target>
        <note />
      </trans-unit>
      <trans-unit id="TestExportsShouldNotBeDiscoverableDescription">
        <source>Test exports should not be discoverable</source>
        <target state="new">Test exports should not be discoverable</target>
        <note />
      </trans-unit>
      <trans-unit id="TestExportsShouldNotBeDiscoverableMessage">
        <source>'{0}' is exported for test purposes and should be marked PartNotDiscoverable</source>
        <target state="new">'{0}' is exported for test purposes and should be marked PartNotDiscoverable</target>
        <note />
      </trans-unit>
      <trans-unit id="TestExportsShouldNotBeDiscoverableTitle">
        <source>Test exports should not be discoverable</source>
        <target state="new">Test exports should not be discoverable</target>
        <note />
      </trans-unit>
      <trans-unit id="MainThreadDependencyShouldBeVerifiedDescription">
        <source>Main thread dependency should be verified</source>
        <target state="new">Main thread dependency should be verified</target>
        <note />
      </trans-unit>
      <trans-unit id="MainThreadDependencyShouldBeVerifiedFix">
        <source>Verify main thread dependency</source>
        <target state="new">Verify main thread dependency</target>
        <note />
      </trans-unit>
      <trans-unit id="MainThreadDependencyShouldBeVerifiedMessage">
        <source>Main thread dependency should be verified</source>
        <target state="new">Main thread dependency should be verified</target>
        <note />
      </trans-unit>
      <trans-unit id="MainThreadDependencyShouldBeVerifiedTitle">
        <source>Main thread dependency should be verified</source>
        <target state="new">Main thread dependency should be verified</target>
        <note />
      </trans-unit>
      <trans-unit id="UseSpecializedCollectionsEmptyEnumerableTitle">
        <source>Use SpecializedCollections.EmptyEnumerable()</source>
        <target state="translated">Используйте SpecializedCollections.EmptyEnumerable()</target>
        <note />
      </trans-unit>
      <trans-unit id="UseSpecializedCollectionsEmptyEnumerableDescription">
        <source>#N/A</source>
        <target state="translated">#Н/Д</target>
        <note />
      </trans-unit>
      <trans-unit id="UseSpecializedCollectionsEmptyEnumerableMessage">
        <source>Use SpecializedCollections.EmptyEnumerable()</source>
        <target state="translated">Используйте SpecializedCollections.EmptyEnumerable()</target>
        <note />
      </trans-unit>
      <trans-unit id="UseSpecializedCollectionsSingletonEnumerableTitle">
        <source>Use SpecializedCollections.SingletonEnumerable()</source>
        <target state="translated">Используйте SpecializedCollections.SingletonEnumerable()</target>
        <note />
      </trans-unit>
      <trans-unit id="UseSpecializedCollectionsSingletonEnumerableDescription">
        <source>#N/A</source>
        <target state="translated">#Н/Д</target>
        <note />
      </trans-unit>
      <trans-unit id="UseSpecializedCollectionsSingletonEnumerableMessage">
        <source>Use SpecializedCollections.SingletonEnumerable()</source>
        <target state="translated">Используйте SpecializedCollections.SingletonEnumerable()</target>
        <note />
      </trans-unit>
      <trans-unit id="InvokeTheCorrectPropertyToEnsureCorrectUseSiteDiagnosticsTitle">
        <source>Invoke the correct property to ensure correct use site diagnostics.</source>
        <target state="translated">Вызовите подходящее свойство, чтобы обеспечить правильное использование диагностики сайта.</target>
        <note />
      </trans-unit>
      <trans-unit id="InvokeTheCorrectPropertyToEnsureCorrectUseSiteDiagnosticsDescription">
        <source>#N/A</source>
        <target state="translated">#Н/Д</target>
        <note />
      </trans-unit>
      <trans-unit id="InvokeTheCorrectPropertyToEnsureCorrectUseSiteDiagnosticsMessage">
        <source>Invoke the correct property to ensure correct use site diagnostics.</source>
        <target state="translated">Вызовите подходящее свойство, чтобы обеспечить правильное использование диагностики сайта.</target>
        <note />
      </trans-unit>
      <trans-unit id="DoNotUseGenericCodeActionCreateToCreateCodeActionTitle">
        <source>Do not use generic CodeAction.Create to create CodeAction</source>
        <target state="translated">Не используйте универсальный CodeAction.Create для создания CodeAction</target>
        <note />
      </trans-unit>
      <trans-unit id="DoNotUseGenericCodeActionCreateToCreateCodeActionDescription">
        <source>#N/A</source>
        <target state="translated">#Н/Д</target>
        <note />
      </trans-unit>
      <trans-unit id="DoNotUseGenericCodeActionCreateToCreateCodeActionMessage">
        <source>Do not use generic CodeAction.Create to create CodeAction</source>
        <target state="translated">Не используйте универсальный CodeAction.Create для создания CodeAction</target>
        <note />
      </trans-unit>
      <trans-unit id="OverrideObjectEqualsObjectWhenImplementingIequatableTitle">
        <source>Override Object.Equals(object) when implementing Iequatable</source>
        <target state="translated">Переопределите Object.Equals(object) при реализации IEquatable</target>
        <note />
      </trans-unit>
      <trans-unit id="OverrideObjectEqualsObjectWhenImplementingIequatableDescription">
        <source>#N/A</source>
        <target state="translated">#Н/Д</target>
        <note />
      </trans-unit>
      <trans-unit id="OverrideObjectEqualsObjectWhenImplementingIequatableMessage">
        <source>Override Object.Equals(object) when implementing Iequatable</source>
        <target state="translated">Переопределите Object.Equals(object) при реализации IEquatable</target>
        <note />
      </trans-unit>
      <trans-unit id="DoNotInvokeDiagnosticDescriptorTitle">
        <source>Do not invoke Diagnostic.Descriptor</source>
        <target state="translated">Не вызывайте Diagnostic.Descriptor</target>
        <note />
      </trans-unit>
      <trans-unit id="DoNotInvokeDiagnosticDescriptorDescription">
        <source>Accessing the Descriptor property of Diagnostic in compiler layer leads to unnecessary string allocations for fields of the descriptor that are not utilized in command line compilation. Hence, you should avoid accessing the Descriptor of the compiler diagnostics here. Instead you should directly access these properties off the Diagnostic type.</source>
        <target state="translated">Обращение к свойству Descriptor типа Diagnostic на уровне компилятора ведет к ненужным выделениям строк для полей дескриптора, которые не используются при компиляции из командной строки. Поэтому здесь вам не следует обращаться к свойству Descriptor диагностики компилятора. Вместо этого обращайтесь к этим свойствам напрямую без типа Diagnostic.</target>
        <note />
      </trans-unit>
      <trans-unit id="DoNotInvokeDiagnosticDescriptorMessage">
        <source>Do not invoke property '{0}' on type '{1}', instead directly access the required member{2} on '{1}'</source>
        <target state="translated">Не вызывайте свойство "{0}" для типа "{1}", вместо этого напрямую обратитесь к нужному члену {2} для "{1}"</target>
        <note />
      </trans-unit>
      <trans-unit id="SymbolDeclaredEventMustBeGeneratedForSourceSymbolsTitle">
        <source>SymbolDeclaredEvent must be generated for source symbols</source>
        <target state="translated">Для исходных символов нужно создать SymbolDeclaredEvent</target>
        <note />
      </trans-unit>
      <trans-unit id="SymbolDeclaredEventMustBeGeneratedForSourceSymbolsDescription">
        <source>Compilation event queue is required to generate symbol declared events for all declared source symbols. Hence, every source symbol type or one of its base types must generate a symbol declared event.</source>
        <target state="translated">Чтобы создать объявляемые символом события для всех объявленных исходных символов, нужна очередь событий компиляции. Поэтому каждый тип исходных символов или один из его базовых типов должны создавать объявляемое символом событие.</target>
        <note />
      </trans-unit>
      <trans-unit id="SymbolDeclaredEventMustBeGeneratedForSourceSymbolsMessage">
        <source>SymbolDeclaredEvent must be generated for source symbols</source>
        <target state="translated">Для исходных символов нужно создать SymbolDeclaredEvent</target>
        <note />
      </trans-unit>
      <trans-unit id="DoNotMixAttributesFromDifferentVersionsOfMEFTitle">
        <source>Do not mix attributes from different versions of MEF</source>
        <target state="translated">Не смешивайте атрибуты из разных версий MEF</target>
        <note />
      </trans-unit>
      <trans-unit id="DoNotMixAttributesFromDifferentVersionsOfMEFDescription">
        <source>Do not mix attributes from different versions of MEF</source>
        <target state="translated">Не смешивайте атрибуты из разных версий MEF</target>
        <note />
      </trans-unit>
      <trans-unit id="DoNotMixAttributesFromDifferentVersionsOfMEFMessage">
        <source>Attribute '{0}' comes from a different version of MEF than the export attribute on '{1}'</source>
        <target state="translated">Атрибут "{0}" отличается версией MEF от атрибута экспорта в "{1}"</target>
        <note />
      </trans-unit>
      <trans-unit id="PartsExportedWithMEFv2MustBeMarkedAsSharedTitle">
        <source>Parts exported with MEFv2 must be marked as Shared</source>
        <target state="translated">Части, экспортированные с помощью MEF версии 2, должны быть помечены как Shared</target>
        <note />
      </trans-unit>
      <trans-unit id="PartsExportedWithMEFv2MustBeMarkedAsSharedDescription">
        <source>Part exported with MEFv2 must be marked with the Shared attribute.</source>
        <target state="translated">Часть, экспортированная с помощью MEF версии 2, должна быть помечена с помощью атрибута Shared.</target>
        <note />
      </trans-unit>
      <trans-unit id="PartsExportedWithMEFv2MustBeMarkedAsSharedMessage">
        <source>'{0}' is exported with MEFv2 and hence must be marked as Shared</source>
        <target state="translated">"{0}" экспортируется с помощью MEF версии 2 и поэтому должна быть помечена как Shared</target>
        <note />
      </trans-unit>
    </body>
  </file>
</xliff>